{"version":3,"file":"index.js","sources":["../../../node_modules/@typhonjs-svelte/runtime-base/_dist/svelte/transition/index.js"],"sourcesContent":["import { linear } from 'svelte/easing';\nimport { lerp } from '@typhonjs-svelte/runtime-base/math/interpolate';\nimport { getEasingFunc } from '@typhonjs-svelte/runtime-base/svelte/easing';\nimport { fade, slide } from 'svelte/transition';\n\n/**\n * Provides a rotate transition. For options `easing` is applied to the rotate transition. The default easing is\n * linear.\n *\n * Note: that when reversing the transition that time goes from `1 - 0`, so if specific options are applied for\n * rotating out transition then `end` and `initial` are swapped.\n *\n * @param {HTMLElement} node - The transition node.\n *\n * @param {object}      [options] - Optional parameters.\n *\n * @param {number}      [options.delay] - Delay in ms before start of transition.\n *\n * @param {number}      [options.duration] - Total transition length in ms.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easing='linear'] - Easing function name or\n *        function to apply to the rotate transition.\n *\n * @param {number}      [options.end=0] - End rotation in degrees.\n *\n * @param {number}      [options.initial=0] - Initial rotation in degrees.\n *\n * @returns {import('svelte/transition').TransitionConfig} Transition config.\n */\nfunction rotate(node, options)\n{\n   const easingRotate = getEasingFunc(options.easing);\n\n   const initialDeg = options.initial ?? 0;\n   const endDeg = options.end ?? 0;\n\n   return {\n      delay: options.delay ?? 0,\n      duration: options.duration ?? 500,\n      easing: linear,\n      css: (t) =>\n      {\n         const rotateT = easingRotate(t);\n         return `transform: rotate(${lerp(initialDeg, endDeg, rotateT)}deg)`;\n      }\n   };\n}\n\n/**\n * Combines rotate & fade transitions into a single transition. For options `easing` this is applied to both\n * transitions, however if provided `easingRotate` and / or `easingFade` will take precedence. The default easing is\n * linear.\n *\n * Note: that when reversing the transition that time goes from `1 - 0`, so if specific options are applied for\n * rotating out transition then `end` and `initial` are swapped.\n *\n * @param {HTMLElement} node - The transition node.\n *\n * @param {object}      [options] - Optional parameters.\n *\n * @param {number}      [options.delay] - Delay in ms before start of transition.\n *\n * @param {number}      [options.duration] - Total transition length in ms.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easing='linear'] - Easing function name or\n *        function to apply to both slide & fade transitions.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easingFade='linear'] - Easing function name or\n *        function to apply to the fade transition.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easingRotate='linear'] - Easing function name or\n *        function to apply to the rotate transition.\n *\n * @param {number}      [options.end=0] - End rotation in degrees.\n *\n * @param {number}      [options.initial=0] - Initial rotation in degrees.\n *\n * @returns {import('svelte/transition').TransitionConfig} Transition config.\n */\nfunction rotateFade(node, options)\n{\n   const easingFade = getEasingFunc(options.easingFade ?? options.easing);\n   const easingRotate = getEasingFunc(options.easingRotate ?? options.easing);\n\n   const fadeTransition = fade(node);\n\n   const initialDeg = options.initial ?? 0;\n   const endDeg = options.end ?? 0;\n\n   return {\n      delay: options.delay ?? 0,\n      duration: options.duration ?? 500,\n      easing: linear,\n      css: (t) =>\n      {\n         const fadeT = easingFade(t);\n         const rotateT = easingRotate(t);\n\n         return `transform: rotate(${lerp(initialDeg, endDeg, rotateT)}deg); ${fadeTransition.css(fadeT, 1 - fadeT)}`;\n      }\n   };\n}\n\n/**\n * Combines slide & fade transitions into a single transition. For options `easing` this is applied to both transitions,\n * however if provided `easingSlide` and / or `easingFade` will take precedence. The default easing is linear.\n *\n * @param {HTMLElement} node - The transition node.\n *\n * @param {object}      [options] - Optional parameters.\n *\n * @param {'x' | 'y'}   [options.axis] - The sliding axis.\n *\n * @param {number}      [options.delay] - Delay in ms before start of transition.\n *\n * @param {number}      [options.duration] - Total transition length in ms.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easing=linear] - Easing function name or\n *        function to apply to both slide & fade transitions.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easingFade=linear] - Easing function name or\n *        function to apply to the fade transition.\n *\n * @param {import('#runtime/svelte/easing').EasingReference}   [options.easingSlide=linear] - Easing function name or\n *        function to apply to the slide transition.\n *\n * @returns {import('svelte/transition').TransitionConfig} Transition config.\n */\nfunction slideFade(node, options)\n{\n   const fadeEasing = getEasingFunc(options.easingFade ?? options.easing);\n   const slideEasing = getEasingFunc(options.easingSlide ?? options.easing);\n\n   const fadeTransition = fade(node);\n   const slideTransition = slide(node, { axis: options.axis });\n\n   return {\n      delay: options.delay ?? 0,\n      duration: options.duration ?? 500,\n      easing: linear,\n      css: (t) =>\n      {\n         const fadeT = fadeEasing(t);\n         const slideT = slideEasing(t);\n         return `${slideTransition.css(slideT, 1 - slideT)}; ${fadeTransition.css(fadeT, 1 - fadeT)}`;\n      }\n   };\n}\n\n/**\n * Converts a Svelte transition to an animation. Both transitions & animations use the same CSS / styles solution and\n * resulting data so wrap the transition function with the signature of an animation.\n *\n * @param {(node: Element, ...rest: any[]) => import('svelte/transition').TransitionConfig} fn -\n *        A Svelte transition function.\n *\n * @returns {(\n *    node: Element,\n *    data: { from: DOMRect, to: DOMRect },\n *    ...rest: any\n * ) => import('svelte/animation').AnimationConfig} - Transition function converted to an animation.\n */\nfunction toAnimation(fn)\n{\n   return (node, animations, ...rest) => fn(node, ...rest);\n}\n\n/**\n * Provides static data useful for handling custom props / options to components that allow dynamic configuration of\n * transitions. This is used in all application shells and components that have configurable transitions.\n *\n * @ignore\n */\nclass TJSDefaultTransition\n{\n   static #options = {};\n\n   static #default = () => void 0;\n\n   /**\n    * @returns {() => undefined} Default empty transition.\n    */\n   static get default() { return this.#default; }\n\n   /**\n    * @returns {{}} Default empty options.\n    */\n   static get options() { return this.#options; }\n}\n\nexport { TJSDefaultTransition, rotate, rotateFade, slideFade, toAnimation };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}