{"version":3,"file":"index.js","sources":["../../../../../node_modules/@typhonjs-fvtt/svelte/_dist/store/fvtt/settings/index.js"],"sourcesContent":["import { writable } from 'svelte/store';\nimport { isMinimalWritableStore, subscribeIgnoreFirst } from '@typhonjs-svelte/runtime-base/svelte/store/util';\nimport { CrossWindow } from '@typhonjs-svelte/runtime-base/util/browser';\nimport { isObject, isIterable } from '@typhonjs-svelte/runtime-base/util/object';\n\nvar _a;\n/**\n * Registers game settings and creates a backing Svelte store for each setting. The Svelte store will update the\n * Foundry game settings and vice versa when changes occur to the Foundry game settings the updated data is set to the\n * store.\n *\n * Note: It is possible to add multiple `onChange` callbacks on registration.\n *\n * @typeParam `ExtraProps` - Defines additional properties for game setting options / data that child implementations\n * may define.\n *\n * @privateRemarks\n * TODO: A possible future extension is to offer type checking against the setting type by creating a customized\n * writable store that has an overloaded `set` method to provide type checking.\n */\nclass TJSGameSettings {\n    /**\n     */\n    #namespace;\n    /**\n     */\n    #settings = [];\n    /**\n     */\n    #stores = new Map();\n    /**\n     * Creates the TJSGameSettings instance.\n     *\n     * @param namespace - The namespace for all settings.\n     */\n    constructor(namespace) {\n        if (typeof namespace !== 'string') {\n            throw new TypeError(`'namespace' is not a string.`);\n        }\n        this.#namespace = namespace;\n    }\n    /**\n     * Creates a new writable for the given key.\n     *\n     * @param initialValue - An initial value to set to new stores.\n     *\n     * @returns The new writable.\n     */\n    static #createStore(initialValue) {\n        return writable(initialValue);\n    }\n    /**\n     * @returns Returns namespace set in constructor.\n     */\n    get namespace() {\n        return this.#namespace;\n    }\n    /**\n     * Gets a store from the `stores` Map or creates a new store for the key.\n     *\n     * @param key - Key to lookup in stores map.\n     *\n     * @param [initialValue] - An initial value to set to new stores.\n     *\n     * @returns The store for the given key.\n     */\n    #getStore(key, initialValue) {\n        let store = this.#stores.get(key);\n        if (store === void 0) {\n            store = _a.#createStore(initialValue);\n            this.#stores.set(key, store);\n        }\n        return store;\n    }\n    /**\n     * Returns a readable Game Settings store for the associated key.\n     *\n     * @param key - Game setting key.\n     *\n     * @returns The associated store for the given game setting key.\n     */\n    getReadableStore(key) {\n        if (!this.#stores.has(key)) {\n            console.warn(`TJSGameSettings - getReadableStore: '${key}' is not a registered setting.`);\n            return;\n        }\n        const store = this.#getStore(key);\n        return { subscribe: store.subscribe };\n    }\n    /**\n     * Returns a writable Game Settings store for the associated key.\n     *\n     * @param key - Game setting key.\n     *\n     * @returns The associated store for the given game setting key.\n     */\n    getStore(key) {\n        return this.getWritableStore(key);\n    }\n    /**\n     * Returns a writable Game Settings store for the associated key.\n     *\n     * @param key - Game setting key.\n     *\n     * @returns The associated store for the given game setting key.\n     */\n    getWritableStore(key) {\n        if (!this.#stores.has(key)) {\n            console.warn(`TJSGameSettings - getWritableStore: '${key}' is not a registered setting.`);\n            return;\n        }\n        return this.#getStore(key);\n    }\n    /**\n     * Registers a setting with TJSGameSettings and Foundry core.\n     *\n     * @param setting - A GameSetting instance to set to Foundry game settings.\n     *\n     * @param coreConfig - When false this overrides the `setting.options.config` parameter when registering the setting\n     *        with Foundry. This allows the settings to be displayed in the app itself, but removed from the standard\n     *        Foundry configuration location.\n     */\n    register(setting, coreConfig = true) {\n        if (!isObject(setting)) {\n            throw new TypeError(`TJSGameSettings - register: setting is not an object.`);\n        }\n        if (!isObject(setting.options)) {\n            throw new TypeError(`TJSGameSettings - register: 'setting.options' attribute is not an object.`);\n        }\n        if (typeof coreConfig !== 'boolean') {\n            throw new TypeError(`TJSGameSettings - register: 'coreConfig' is not an boolean.`);\n        }\n        if (setting.store !== void 0 && !isMinimalWritableStore(setting.store)) {\n            throw new TypeError(`TJSGameSettings - register: 'setting.store' attribute is not a minimal writable store.`);\n        }\n        const namespace = setting.namespace ?? this.#namespace;\n        const key = setting.key;\n        // The `config` parameter passed to Foundry core.\n        const foundryConfig = coreConfig ? setting.options.config ?? true : false;\n        if (typeof namespace !== 'string') {\n            throw new TypeError(`TJSGameSettings - register: 'namespace' attribute is not a string.`);\n        }\n        if (typeof key !== 'string') {\n            throw new TypeError(`TJSGameSettings - register: 'key' attribute is not a string.`);\n        }\n        const store = setting.store;\n        const options = setting.options;\n        const onchangeFunctions = [];\n        // When true prevents local store subscription from a loop when values are object data.\n        let gateSet = false;\n        // Provides an `onChange` callback to update the associated store.\n        onchangeFunctions.push((value) => {\n            const callbackStore = this.#getStore(key);\n            if (callbackStore && !gateSet) {\n                gateSet = true;\n                callbackStore.set(value);\n                gateSet = false;\n            }\n        });\n        // Handle loading any existing `onChange` callbacks.\n        if (isIterable(options?.onChange)) {\n            for (const entry of options.onChange) {\n                if (typeof entry === 'function') {\n                    onchangeFunctions.push(entry);\n                }\n            }\n        }\n        else if (typeof options.onChange === 'function') {\n            onchangeFunctions.push(options.onChange);\n        }\n        // Provides the final onChange callback that iterates over all the stored onChange callbacks.\n        const onChange = (value) => {\n            for (const entry of onchangeFunctions) {\n                entry(value);\n            }\n        };\n        // @ts-expect-error PF2E types do not have partial aspects for `name`.\n        globalThis.game.settings.register(namespace, key, { ...options, config: foundryConfig, onChange });\n        // Set new store value with existing setting or default value.\n        const targetStore = store ? store : this.#getStore(key, globalThis.game.settings.get(namespace, key));\n        // If a store instance is passed into register then initialize it with game settings data.\n        if (store) {\n            this.#stores.set(key, targetStore);\n            store.set(globalThis.game.settings.get(namespace, key));\n        }\n        const storeHandler = async (value) => {\n            if (!gateSet) {\n                gateSet = true;\n                await globalThis.game.settings.set(namespace, key, value);\n            }\n            gateSet = false;\n        };\n        // Subscribe to self to set associated game setting on updates after verifying that the new value does not match\n        // existing game setting.\n        subscribeIgnoreFirst(targetStore, storeHandler);\n        // Transfer setting options to data.\n        {\n            const { store, ...rest } = setting;\n            const gameSettingData = Object.assign({}, rest, { namespace, key, options });\n            Object.freeze(gameSettingData);\n            this.#settings.push(gameSettingData);\n        }\n    }\n    /**\n     * Registers multiple settings.\n     *\n     * @param settings - An iterable list of game setting configurations to register.\n     *\n     * @param coreConfig - When false this overrides the `setting.options.config` parameter when registering the setting\n     *        with Foundry. This allows the settings to be displayed in the app itself, but removed from the standard\n     *        Foundry configuration location.\n     *\n     * @returns An object containing all TJSGameSetting store subscriber handlers for each setting `key` added.\n     */\n    registerAll(settings, coreConfig) {\n        if (!isIterable(settings)) {\n            throw new TypeError(`TJSGameSettings - registerAll: settings is not iterable.`);\n        }\n        for (const entry of settings) {\n            if (!isObject(entry)) {\n                throw new TypeError(`TJSGameSettings - registerAll: entry in settings is not an object.`);\n            }\n            if (typeof entry.namespace !== 'string') {\n                throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'namespace' attribute.`);\n            }\n            if (typeof entry.key !== 'string') {\n                throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'key' attribute.`);\n            }\n            if (!isObject(entry.options)) {\n                throw new TypeError(`TJSGameSettings - registerAll: entry in settings missing 'options' attribute.`);\n            }\n            this.register(entry, coreConfig);\n        }\n    }\n    // Iterators ------------------------------------------------------------------------------------------------------\n    /**\n     * Returns an iterable for the game setting data; {@link TJSGameSettings.Data.GameSetting}.\n     *\n     * @param [regex] - Optional regular expression to filter by game setting keys.\n     *\n     * @returns Iterable iterator of `TJSGameSettings.Data.GameSetting`.\n     */\n    *data(regex = void 0) {\n        if (regex !== void 0 && !CrossWindow.isRegExp(regex)) {\n            throw new TypeError(`'regex' is not a RegExp`);\n        }\n        if (!this.#settings.length) {\n            return void 0;\n        }\n        if (regex) {\n            for (const setting of this.#settings) {\n                if (regex.test(setting.key)) {\n                    yield setting;\n                }\n            }\n        }\n        else {\n            for (const setting of this.#settings) {\n                yield setting;\n            }\n        }\n    }\n    /**\n     * Returns an iterable for the game setting keys and stores.\n     *\n     * @param [regex] - Optional regular expression to filter by game setting keys.\n     *\n     * @typeParam T - Store data type.\n     *\n     * @returns Iterable iterator of keys and stores.\n     */\n    *entries(regex = void 0) {\n        if (regex !== void 0 && !CrossWindow.isRegExp(regex)) {\n            throw new TypeError(`'regex' is not a RegExp`);\n        }\n        if (!this.#stores.size) {\n            return void 0;\n        }\n        if (regex) {\n            for (const key of this.#stores.keys()) {\n                if (regex.test(key)) {\n                    yield [key, this.getStore(key)];\n                }\n            }\n        }\n        else {\n            for (const key of this.#stores.keys()) {\n                yield [key, this.getStore(key)];\n            }\n        }\n    }\n    /**\n     * Returns an iterable for the game setting keys from existing stores.\n     *\n     * @param [regex] - Optional regular expression to filter by game setting keys.\n     *\n     * @returns Iterable iterator of game setting keys.\n     */\n    *keys(regex = void 0) {\n        if (regex !== void 0 && !CrossWindow.isRegExp(regex)) {\n            throw new TypeError(`'regex' is not a RegExp`);\n        }\n        if (!this.#stores.size) {\n            return void 0;\n        }\n        if (regex) {\n            for (const key of this.#stores.keys()) {\n                if (regex.test(key)) {\n                    yield key;\n                }\n            }\n        }\n        else {\n            for (const key of this.#stores.keys()) {\n                yield key;\n            }\n        }\n    }\n    /**\n     * Returns an iterable for the game setting stores.\n     *\n     * @param [regex] - Optional regular expression to filter by game setting keys.\n     *\n     * @returns Iterable iterator of stores.\n     */\n    *stores(regex = void 0) {\n        if (regex !== void 0 && !CrossWindow.isRegExp(regex)) {\n            throw new TypeError(`'regex' is not a RegExp`);\n        }\n        if (!this.#stores.size) {\n            return void 0;\n        }\n        if (regex) {\n            for (const key of this.#stores.keys()) {\n                if (regex.test(key)) {\n                    yield this.getStore(key);\n                }\n            }\n        }\n        else {\n            for (const key of this.#stores.keys()) {\n                yield this.getStore(key);\n            }\n        }\n    }\n}\n_a = TJSGameSettings;\n\n/**\n * Provides an accessible JS object that is updated reactively from all or subset of TJSGameSettings stores.\n * Accessors are provided to directly get / set current setting data. Using a setter will update the setting and backing\n * store.\n *\n * TJSLiveGameSettings is also a readable Svelte store essentially providing a customizable derived store of all\n * settings tracked.\n *\n * Note: You can create a JSDoc / `@typedef` to apply with `@type` and achieve typing support in IDEs for the\n * customizable live settings instance. Please see the example at the end of this source file on how to accomplish this\n * task.\n *\n * Note: Presently `TJSLiveGameSettings` is openly typed, but there will be a TypeScript friendly way to strongly type\n * additional instance properties.\n *\n * Note: When using from JS a second subscriber function argument is the key that was updated.\n * From Svelte: Use 'lastKey' accessor to retrieve the last updated key.\n *\n * Note: In the future this class will be reworked w/ Svelte 5 state handling.\n *\n * @example\n * ```js\n * // Example of creating a typedef to type your specific live game settings instance. Add all relevant `@property`\n * // entries.\n *\n * /**\n *  * @typedef {TJSLiveGameSettings} MyLiveGameSettings - Extend TJSLiveGameSettings and name this anything.\n *  *\n *  * @property {boolean} myBooleanSetting - Add property / type entries for setting keys associated w/ accessors.\n *  *\\/\n *\n * /** @type {MyLiveGameSettings} *\\/\n * const liveGameSettings = new TJSLiveGameSettings(gameSettings);\n * liveGameSettings.myBooleanSetting is now typed as a boolean.\n * ```\n */\nclass TJSLiveGameSettings {\n    /**\n     * Stores the current parsed game setting data.\n     */\n    #currentData = {};\n    /**\n     * Map of all game settings stores and unsubscribe functions currently subscribed.\n     */\n    #gameSettings = new Map();\n    /**\n     * Stores readable subscribers of this instance.\n     *\n     * Note: When using from JS a second argument is the key that was updated.\n     * From Svelte: Use 'lastKey' accessor to retrieve the last updated key.\n     */\n    #subscribers = [];\n    /**\n     * Stores the last updated key.\n     */\n    #lastKey = void 0;\n    /**\n     * Creates a live binding against the setting stores. All settings are configured by default, but can also be\n     * filtered by setting key with inclusive / exclusive Sets.\n     *\n     * @param gameSettings - A game settings instance to subscribe to...\n     *\n     * @param [options] - TJSLiveGameSettings options.\n     *\n     * @param [options.include] - A Set of setting keys to include from subscribing.\n     *\n     * @param [options.exclude] - A Set of setting keys to exclude from subscribing.\n     */\n    constructor(gameSettings, { include, exclude } = {}) {\n        if (!(gameSettings instanceof TJSGameSettings)) {\n            throw new TypeError(`'gameSettings' is not a TJSGameSettings instance.`);\n        }\n        if (include !== void 0 && !CrossWindow.isSet(include)) {\n            throw new TypeError(`'options.include' is not a Set.`);\n        }\n        if (exclude !== void 0 && !CrossWindow.isSet(exclude)) {\n            throw new TypeError(`'options.exclude' is not a Set.`);\n        }\n        for (const setting of gameSettings.data()) {\n            const key = setting.key;\n            // Skip any keys that are in the include set.\n            if (include !== void 0 && !include.has(key)) {\n                continue;\n            }\n            // Skip any keys that are in the exclude set.\n            if (exclude !== void 0 && exclude.has(key)) {\n                continue;\n            }\n            if (typeof this[key] === 'function' || key === 'lastKey') {\n                console.warn(`TJSLiveGameSettings warning: key (${key}) shadows a function. Skipping key.`);\n            }\n            const store = gameSettings.getStore(key);\n            if (!store) {\n                continue;\n            }\n            // Update this instance storing setting data by key.\n            this.#gameSettings.set(key, {\n                store,\n                unsubscribe: store.subscribe((data) => {\n                    if (this.#currentData !== void 0) {\n                        this.#currentData[key] = data;\n                    }\n                    this.#lastKey = key;\n                    // Notify any child instance that a particular key has updated.\n                    this._update(key);\n                    // Notify any readable store subscribers.\n                    this.#updateSubscribers(key);\n                })\n            });\n            // Define new accessors for setting key.\n            Object.defineProperty(this, key, {\n                get: () => {\n                    if (this.#currentData === void 0) {\n                        throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\n                    }\n                    else {\n                        return this.#currentData[key];\n                    }\n                },\n                set: (data) => {\n                    if (this.#currentData === void 0) {\n                        throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\n                    }\n                    else {\n                        this.#gameSettings.get(key)?.store.set(data);\n                    }\n                }\n            });\n        }\n        Object.seal(this);\n    }\n    /**\n     * @returns Last updated setting key.\n     */\n    get lastKey() {\n        return this.#lastKey;\n    }\n    // ----------------------------------------------------------------------------------------------------------------\n    /**\n     * Destroys this instance of TJSLiveGameSettings and unsubscribes from all game setting stores.\n     */\n    destroy() {\n        for (const data of this.#gameSettings.values()) {\n            if (typeof data.unsubscribe === 'function') {\n                data.unsubscribe();\n            }\n        }\n        this.#gameSettings.clear();\n        this.#currentData = {};\n    }\n    /**\n     * Returns an iterator / generator of all setting entries.\n     *\n     * @returns An iterator returning setting entries.\n     */\n    *entries() {\n        if (this.#currentData === void 0) {\n            throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\n        }\n        for (const key in this.#currentData) {\n            yield [key, this.#currentData[key]];\n        }\n    }\n    /**\n     * Returns an iterator / generator of all setting keys.\n     *\n     * @returns An iterator returning setting keys.\n     */\n    *keys() {\n        if (this.#currentData === void 0) {\n            throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\n        }\n        for (const key in this.#currentData) {\n            yield key;\n        }\n    }\n    /**\n     * Returns a string / JSON stringify of the current setting data.\n     *\n     * @returns Tracked setting data.\n     */\n    toString() {\n        if (this.#currentData === void 0) {\n            throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\n        }\n        return JSON.stringify(this.#currentData);\n    }\n    /**\n     * Override to respond to setting update.\n     *\n     * @param key - The setting / local key that updated.\n     */\n    _update(key) { } // eslint-disable-line no-unused-vars\n    /**\n     * Returns an iterator / generator of all values.\n     *\n     * @returns An iterator returning setting values.\n     */\n    *values() {\n        if (this.#currentData === void 0) {\n            throw new Error(`This instance of TJSLiveGameSettings has been destroyed.`);\n        }\n        for (const key in this.#currentData) {\n            yield this.#currentData[key];\n        }\n    }\n    // Readable store implementation ----------------------------------------------------------------------------------\n    /**\n     * @param handler - Callback function that is invoked on update / changes.\n     *\n     * @returns Unsubscribe function.\n     */\n    subscribe(handler) {\n        this.#subscribers.push(handler); // add handler to the array of subscribers\n        handler(this, void 0); // call handler with current value\n        // Return unsubscribe function.\n        return () => {\n            const index = this.#subscribers.findIndex((sub) => sub === handler);\n            if (index >= 0) {\n                this.#subscribers.splice(index, 1);\n            }\n        };\n    }\n    /**\n     * Updates subscribers.\n     *\n     * @param key - The key that was updated.\n     */\n    #updateSubscribers(key) {\n        for (let cntr = 0; cntr < this.#subscribers.length; cntr++) {\n            this.#subscribers[cntr](this, key);\n        }\n    }\n}\n\nexport { TJSGameSettings, TJSLiveGameSettings };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}