{"version":3,"file":"index.js","sources":["../../../../node_modules/@typhonjs-svelte/runtime-base/_dist/util/dom/style/index.js"],"sourcesContent":["import { isObject, isIterable } from '@typhonjs-svelte/runtime-base/util/object';\n\n/**\n * Provides resources for parsing style strings.\n */\nclass StyleParse\n{\n   static #regexPixels = /(\\d+)\\s*px/;\n\n   /**\n    * Parses a pixel string / computed styles. Ex. `100px` returns `100`.\n    *\n    * @param {string}   value - Value to parse.\n    *\n    * @returns {number|undefined} The integer component of a pixel string.\n    */\n   static pixels(value)\n   {\n      if (typeof value !== 'string') { return void 0; }\n\n      const isPixels = this.#regexPixels.test(value);\n      const number = parseInt(value);\n\n      return isPixels && Number.isFinite(number) ? number : void 0;\n   }\n\n   /**\n    * Returns the pixel value for `1rem` based on the root document element. You may apply an optional multiplier.\n    *\n    * @param {number} [multiplier=1] - Optional multiplier to apply to `rem` pixel value; default: 1.\n    *\n    * @param {object} [options] - Optional parameters.\n    *\n    * @param {Document} [options.targetDocument=document] The target DOM {@link Document} if different from the main\n    *        browser global `document`.\n    *\n    * @returns {number} The pixel value for `1rem` with or without a multiplier based on the root document element.\n    */\n   static remPixels(multiplier = 1, { targetDocument = document } = {})\n   {\n      return targetDocument?.documentElement ?\n       multiplier * parseFloat(globalThis.getComputedStyle(targetDocument.documentElement).fontSize) : void 0;\n   }\n}\n\n/**\n * Provides a managed dynamic style sheet / element useful in configuring global CSS variables. When creating an\n * instance of TJSStyleManager you must provide a \"document key\" / string for the style element added. The style element\n * can be accessed via `document[docKey]`.\n *\n * Instances of TJSStyleManager can also be versioned by supplying a positive integer greater than or equal to `1` via\n * the 'version' option. This version number is assigned to the associated style element. When a TJSStyleManager\n * instance is created and there is an existing instance with a version that is lower than the current instance all CSS\n * rules are removed letting the higher version to take precedence. This isn't a perfect system and requires thoughtful\n * construction of CSS variables exposed, but allows multiple independently compiled TRL packages to load the latest\n * CSS variables. It is recommended to always set `overwrite` option of {@link TJSStyleManager.setProperty} and\n * {@link TJSStyleManager.setProperties} to `false` when loading initial values.\n */\nclass TJSStyleManager\n{\n   /** @type {CSSStyleRule} */\n   #cssRule;\n\n   /** @type {string} */\n   #docKey;\n\n   /** @type {string} */\n   #selector;\n\n   /** @type {HTMLStyleElement} */\n   #styleElement;\n\n   /** @type {number} */\n   #version;\n\n   /**\n    *\n    * @param {object}   opts - Options.\n    *\n    * @param {string}   opts.docKey - Required key providing a link to a specific style sheet element.\n    *\n    * @param {string}   [opts.selector=:root] - Selector element.\n    *\n    * @param {Document} [opts.document] - Target document to load styles into.\n    *\n    * @param {number}   [opts.version] - An integer representing the version / level of styles being managed.\n    */\n   constructor({ docKey, selector = ':root', document = globalThis.document, version } = {})\n   {\n      if (typeof docKey !== 'string') { throw new TypeError(`StyleManager error: 'docKey' is not a string.`); }\n\n      if (Object.prototype.toString.call(document) !== '[object HTMLDocument]')\n      {\n         throw new TypeError(`TJSStyleManager error: 'document' is not an instance of HTMLDocument.`);\n      }\n\n      if (typeof selector !== 'string') { throw new TypeError(`StyleManager error: 'selector' is not a string.`); }\n\n      if (version !== void 0 && !Number.isSafeInteger(version) && version < 1)\n      {\n         throw new TypeError(`StyleManager error: 'version' is defined and is not a positive integer >= 1.`);\n      }\n\n      this.#selector = selector;\n      this.#docKey = docKey;\n      this.#version = version;\n\n      if (document[this.#docKey] === void 0)\n      {\n         this.#styleElement = document.createElement('style');\n\n         document.head.append(this.#styleElement);\n\n         // Set initial style manager version if any supplied.\n         this.#styleElement._STYLE_MANAGER_VERSION = version;\n\n         this.#styleElement.sheet.insertRule(`${selector} {}`, 0);\n\n         this.#cssRule = this.#styleElement.sheet.cssRules[0];\n\n         document[docKey] = this.#styleElement;\n      }\n      else\n      {\n         this.#styleElement = document[docKey];\n         this.#cssRule = this.#styleElement.sheet.cssRules[0];\n\n         if (version)\n         {\n            const existingVersion = this.#styleElement._STYLE_MANAGER_VERSION ?? 0;\n\n            // Remove all existing CSS rules / text if version is greater than existing version.\n            if (version > existingVersion)\n            {\n               this.#cssRule.style.cssText = '';\n            }\n         }\n      }\n   }\n\n   /**\n    * @returns {string} Provides an accessor to get the `cssText` for the style sheet.\n    */\n   get cssText()\n   {\n      return this.#cssRule.style.cssText;\n   }\n\n   /**\n    * @returns {number} Returns the version of this instance.\n    */\n   get version()\n   {\n      return this.#version;\n   }\n\n   /**\n    * Provides a copy constructor to duplicate an existing TJSStyleManager instance into a new document.\n    *\n    * Note: This is used to support the `PopOut` module.\n    *\n    * @param {Document} [document] Target browser document to clone into.\n    *\n    * @returns {TJSStyleManager} New style manager instance.\n    */\n   clone(document = globalThis.document)\n   {\n      const newStyleManager = new TJSStyleManager({\n         selector: this.#selector,\n         docKey: this.#docKey,\n         document,\n         version: this.#version\n      });\n\n      newStyleManager.#cssRule.style.cssText = this.#cssRule.style.cssText;\n\n      return newStyleManager;\n   }\n\n   get()\n   {\n      const cssText = this.#cssRule.style.cssText;\n\n      const result = {};\n\n      if (cssText !== '')\n      {\n         for (const entry of cssText.split(';'))\n         {\n            if (entry !== '')\n            {\n               const values = entry.split(':');\n               result[values[0].trim()] = values[1];\n            }\n         }\n      }\n\n      return result;\n   }\n\n   /**\n    * Gets a particular CSS variable.\n    *\n    * @param {string}   key - CSS variable property key.\n    *\n    * @returns {string} Returns CSS variable value.\n    */\n   getProperty(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\n\n      return this.#cssRule.style.getPropertyValue(key);\n   }\n\n   /**\n    * Set rules by property / value; useful for CSS variables.\n    *\n    * @param {{ [key: string]: string }}  rules - An object with property / value string pairs to load.\n    *\n    * @param {boolean}                 [overwrite=true] - When true overwrites any existing values.\n    */\n   setProperties(rules, overwrite = true)\n   {\n      if (!isObject(rules)) { throw new TypeError(`StyleManager error: 'rules' is not an object.`); }\n\n      if (typeof overwrite !== 'boolean') { throw new TypeError(`StyleManager error: 'overwrite' is not a boolean.`); }\n\n      if (overwrite)\n      {\n         for (const [key, value] of Object.entries(rules))\n         {\n            this.#cssRule.style.setProperty(key, value);\n         }\n      }\n      else\n      {\n         // Only set property keys for entries that don't have an existing rule set.\n         for (const [key, value] of Object.entries(rules))\n         {\n            if (this.#cssRule.style.getPropertyValue(key) === '')\n            {\n               this.#cssRule.style.setProperty(key, value);\n            }\n         }\n      }\n   }\n\n   /**\n    * Sets a particular property.\n    *\n    * @param {string}   key - CSS variable property key.\n    *\n    * @param {string}   value - CSS variable value.\n    *\n    * @param {boolean}  [overwrite=true] - Overwrite any existing value.\n    */\n   setProperty(key, value, overwrite = true)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\n\n      if (typeof value !== 'string') { throw new TypeError(`StyleManager error: 'value' is not a string.`); }\n\n      if (typeof overwrite !== 'boolean') { throw new TypeError(`StyleManager error: 'overwrite' is not a boolean.`); }\n\n      if (overwrite)\n      {\n         this.#cssRule.style.setProperty(key, value);\n      }\n      else\n      {\n         if (this.#cssRule.style.getPropertyValue(key) === '')\n         {\n            this.#cssRule.style.setProperty(key, value);\n         }\n      }\n   }\n\n   /**\n    * Removes the property keys specified. If `keys` is an iterable list then all property keys in the list are removed.\n    *\n    * @param {Iterable<string>} keys - The property keys to remove.\n    */\n   removeProperties(keys)\n   {\n      if (!isIterable(keys)) { throw new TypeError(`StyleManager error: 'keys' is not an iterable list.`); }\n\n      for (const key of keys)\n      {\n         if (typeof key === 'string') { this.#cssRule.style.removeProperty(key); }\n      }\n   }\n\n   /**\n    * Removes a particular CSS variable.\n    *\n    * @param {string}   key - CSS variable property key.\n    *\n    * @returns {string} CSS variable value when removed.\n    */\n   removeProperty(key)\n   {\n      if (typeof key !== 'string') { throw new TypeError(`StyleManager error: 'key' is not a string.`); }\n\n      return this.#cssRule.style.removeProperty(key);\n   }\n}\n\nexport { StyleParse, TJSStyleManager };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}