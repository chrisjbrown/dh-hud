{"version":3,"file":"index.js","sources":["../../../node_modules/@typhonjs-svelte/runtime-base/_dist/util/html/index.js"],"sourcesContent":["/**\n * Processes the given HTML by creating by running a CSS selector query with all matched elements being passed through\n * the provided `process` function.\n *\n * @param {object}                  opts - Options\n *\n * @param {string}                  opts.html - The HTML to process.\n *\n * @param {(HTMLElement) => void}   opts.process - The selected element processing function.\n *\n * @param {string}                  opts.selector - The CSS selector query.\n *\n * @param {string}                  [opts.containerElement='div'] - Use a specific container element.\n *\n * @param {boolean}                 [opts.firstMatchOnly=false] - When true `querySelector` is invoked to process the\n *        first matching element only.\n *\n * @param {string}                  [opts.namespaceURI] - The namespace URI of the elements to select.\n *\n * @returns {string} The processed HTML.\n */\nfunction processHTML({ html, process, selector, containerElement = 'div', firstMatchOnly = false, namespaceURI })\n{\n   if (typeof html !== 'string') { throw new TypeError(`processHTML error: 'html' is not a string.`); }\n   if (typeof process !== 'function') { throw new TypeError(`processHTML error: 'process' is not a function.`); }\n   if (typeof selector !== 'string') { throw new TypeError(`processHTML error: 'selector' is not a string.`); }\n\n   if (typeof containerElement !== 'string')\n   {\n      throw new TypeError(`processHTML error: 'containerElement' is not a string.`);\n   }\n\n   if (typeof firstMatchOnly !== 'boolean')\n   {\n      throw new TypeError(`processHTML error: 'firstMatchOnly' is not a boolean.`);\n   }\n\n   if (namespaceURI !== void 0 && typeof namespaceURI !== 'string')\n   {\n      throw new TypeError(`processHTML error: 'namespaceURI' is not a string.`);\n   }\n\n   const resolveSelector = namespaceURI ? `${namespaceURI}|${selector}` : selector;\n\n   const container = document.createElement(containerElement);\n   container.innerHTML = html;\n\n   if (firstMatchOnly)\n   {\n      const element = container.querySelector(resolveSelector);\n      if (element) { process(element); }\n   }\n   else\n   {\n      const elements = container.querySelectorAll(resolveSelector);\n      if (elements)\n      {\n         for (const element of elements) { process(element); }\n      }\n   }\n\n   return container.innerHTML;\n}\n\nexport { processHTML };\n//# sourceMappingURL=index.js.map\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,gBAAgB,GAAG,KAAK,EAAE,cAAc,GAAG,KAAK,EAAE,YAAY,EAAE;AAChH;AACA,GAAG,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,0CAA0C,CAAC,CAAC,CAAC;AACrG,GAAG,IAAI,OAAO,OAAO,KAAK,UAAU,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,+CAA+C,CAAC,CAAC,CAAC;AAC/G,GAAG,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE,EAAE,MAAM,IAAI,SAAS,CAAC,CAAC,8CAA8C,CAAC,CAAC,CAAC;;AAE7G,GAAG,IAAI,OAAO,gBAAgB,KAAK,QAAQ;AAC3C,GAAG;AACH,MAAM,MAAM,IAAI,SAAS,CAAC,CAAC,sDAAsD,CAAC,CAAC;AACnF;;AAEA,GAAG,IAAI,OAAO,cAAc,KAAK,SAAS;AAC1C,GAAG;AACH,MAAM,MAAM,IAAI,SAAS,CAAC,CAAC,qDAAqD,CAAC,CAAC;AAClF;;AAEA,GAAG,IAAI,YAAY,KAAK,MAAM,IAAI,OAAO,YAAY,KAAK,QAAQ;AAClE,GAAG;AACH,MAAM,MAAM,IAAI,SAAS,CAAC,CAAC,kDAAkD,CAAC,CAAC;AAC/E;;AAEA,GAAG,MAAM,eAAe,GAAG,YAAY,GAAG,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,GAAG,QAAQ;;AAElF,GAAG,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,gBAAgB,CAAC;AAC7D,GAAG,SAAS,CAAC,SAAS,GAAG,IAAI;;AAE7B,GAAG,IAAI,cAAc;AACrB,GAAG;AACH,MAAM,MAAM,OAAO,GAAG,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC;AAC9D,MAAM,IAAI,OAAO,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;AACtC;AACA;AACA,GAAG;AACH,MAAM,MAAM,QAAQ,GAAG,SAAS,CAAC,gBAAgB,CAAC,eAAe,CAAC;AAClE,MAAM,IAAI,QAAQ;AAClB,MAAM;AACN,SAAS,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5D;AACA;;AAEA,GAAG,OAAO,SAAS,CAAC,SAAS;AAC7B;;;;","x_google_ignoreList":[0]}