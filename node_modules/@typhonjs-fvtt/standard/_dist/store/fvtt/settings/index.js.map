{"version":3,"file":"index.js","sources":["../../../../src/store/fvtt/settings/UIControlImpl.ts","../../../../src/store/fvtt/settings/TJSGameSettingsWithUI.ts","../../../../src/store/fvtt/settings/theme/DataValidator.ts","../../../../src/store/fvtt/settings/theme/TJSThemeStore.ts"],"sourcesContent":["import { writable }              from 'svelte/store';\n\nimport { TJSDialog }             from '#runtime/svelte/application';\nimport { TJSSvelte }             from '#runtime/svelte/util';\nimport { localize }              from '#runtime/util/i18n';\nimport { isObject }              from '#runtime/util/object';\n\nimport {\n   ripple,\n   rippleFocus }                 from '#standard/action/animate/composable';\n\nimport type {\n   Readable,\n   Writable }                    from 'svelte/store';\n\nimport type { MinimalWritable }  from '#runtime/svelte/store/util';\n\nimport type {\n   TJSGameSettingsWithUI }       from './TJSGameSettingsWithUI';\n\n/**\n * Controls preparation and processing of registered game settings w/ TJSGameSettingsUI. Game settings are parsed\n * for UI display by TJSSettingsEdit. The store `showSettings` is utilized in TJSSettingsSwap component to provide\n * an easy way to flip between settings component or any main slotted component.\n */\nexport class UIControlImpl implements TJSGameSettingsWithUI.UIControl\n{\n   /**\n    */\n   #sections: TJSGameSettingsWithUI.Options.CustomSection[] = [];\n\n   /**\n    */\n   #settings: TJSGameSettingsWithUI;\n\n   /**\n    */\n   #showSettings: boolean = false;\n\n   /**\n    */\n   readonly #showSettingsSet: Function;\n\n   /**\n    */\n   readonly #stores: { showSettings: Readable<boolean> };\n\n   /**\n    * @param settings -\n    */\n   constructor(settings: TJSGameSettingsWithUI)\n   {\n      this.#settings = settings;\n\n      const showSettings: Writable<boolean> = writable(this.#showSettings);\n      this.#showSettingsSet = showSettings.set;\n\n      this.#stores = {\n         showSettings: { subscribe: showSettings.subscribe }\n      };\n\n      Object.freeze(this.#stores);\n   }\n\n   /**\n    * @returns Current `showSettings` state.\n    */\n   get showSettings(): boolean\n   {\n      return this.#showSettings;\n   }\n\n   /**\n    * @returns Returns the managed stores.\n    */\n   get stores(): { showSettings: Readable<boolean> }\n   {\n      return this.#stores;\n   }\n\n   /**\n    * Sets current `showSettings` state.\n    *\n    * @param showSettings - New `showSettings` state.\n    */\n   set showSettings(showSettings: boolean)\n   {\n      if (typeof showSettings !== 'boolean') { throw new TypeError('showSettings must be a boolean'); }\n\n      this.#showSettings = showSettings;\n      this.#showSettingsSet(this.#showSettings);\n   }\n\n   /**\n    * Adds a custom section / folder defined by the provided TJSSettingsCustomSection options object.\n    *\n    * @param options - The configuration object for the custom section.\n    */\n   addSection(options: TJSGameSettingsWithUI.Options.CustomSection): void\n   {\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (!TJSSvelte.util.isComponent(options.class))\n      {\n         throw new TypeError(`'options.class' is not a Svelte component.`);\n      }\n\n      if (options.props !== void 0 && !isObject(options.props))\n      {\n         throw new TypeError(`'options.props' is not an object.`);\n      }\n\n      if (options.folder !== void 0)\n      {\n         const folder: string | TJSGameSettingsWithUI.Options.CustomSectionFolder = options.folder;\n\n         if (typeof folder !== 'string' && !isObject(folder))\n         {\n            throw new TypeError(`'options.folder' is not a string or object.`);\n         }\n\n         if (isObject(folder))\n         {\n            if (typeof folder.label !== 'string') { throw new TypeError(`'options.folder.label' is not a string.`); }\n\n            // Validate custom component set as folder summary end.\n            if (folder.summaryEnd !== void 0)\n            {\n               if (!isObject(folder.summaryEnd))\n               {\n                  throw new TypeError(`'options.folder.summaryEnd' is not an object.`);\n               }\n\n               if (!TJSSvelte.util.isComponent(folder.summaryEnd.class))\n               {\n                  throw new TypeError(`'options.folder.summaryEnd.class' is not a Svelte component.`);\n               }\n\n               if (folder.summaryEnd.props !== void 0 && !isObject(folder.summaryEnd.props))\n               {\n                  throw new TypeError(`'options.folder.summaryEnd.props' is not an object.`);\n               }\n            }\n\n            // Validate that folder inline styles is an object.\n            if (folder.styles !== void 0 && !isObject(folder.styles))\n            {\n               throw new TypeError(`'options.folder.styles' is not an object.`);\n            }\n         }\n      }\n\n      // Validate that section inline styles is an object.\n      if (options.styles !== void 0 && !isObject(options.styles))\n      {\n         throw new TypeError(`'options.styles' is not an object.`);\n      }\n\n      this.#sections.push(options);\n   }\n\n   /**\n    * Creates the `TJSSettingsUI.Data` object by parsing stored settings in the associated {@link TJSGameSettings}\n    * instance.\n    *\n    * @param [options] - Create options\n    *\n    * @returns Parsed UI settings data.\n    */\n   create(options?: TJSGameSettingsWithUI.Options.Create): TJSGameSettingsWithUI.Data\n   {\n      const settings: TJSGameSettingsWithUI.Data = this.#parseSettings(options);\n      const destroy: Function = (): void => this.#destroy(settings);\n\n      return {\n         ...settings,\n         destroy\n      };\n   }\n\n   /**\n    * Destroy callback. Checks for any `requiresReload` parameter in each setting comparing against initial value\n    * when `settings` is created and current value. If there is a difference then show a modal dialog asking the user\n    * if they want to reload for those settings to take effect.\n    *\n    * @param settings - The UI data object initiated w/ `create`.\n    */\n   #destroy(settings: TJSGameSettingsWithUI.Data): void\n   {\n      let requiresClientReload: boolean | undefined = false;\n      let requiresWorldReload: boolean | undefined = false;\n\n      if (Array.isArray(settings.topLevel))\n      {\n         for (const setting of settings.topLevel)\n         {\n            const current: unknown = globalThis.game.settings.get(setting.namespace, setting.key);\n            if (current === setting.initialValue) { continue; }\n\n            requiresClientReload ||= (setting.scope === 'client') && setting.requiresReload;\n            requiresWorldReload ||= (setting.scope === 'world') && setting.requiresReload;\n         }\n      }\n\n      if (Array.isArray(settings.folders))\n      {\n         for (const folder of settings.folders)\n         {\n            if (Array.isArray(folder.settings))\n            {\n               for (const setting of folder.settings)\n               {\n                  const current = globalThis.game.settings.get(setting.namespace, setting.key);\n                  if (current === setting.initialValue) { continue; }\n\n                  requiresClientReload ||= (setting.scope === 'client') && setting.requiresReload;\n                  requiresWorldReload ||= (setting.scope === 'world') && setting.requiresReload;\n               }\n            }\n         }\n      }\n\n      if (requiresClientReload || requiresWorldReload) { this.#reloadConfirm({ world: requiresWorldReload }); }\n\n      this.#showSettings = false;\n      this.#showSettingsSet(this.#showSettings);\n   }\n\n   /**\n    * @param [options] - Optional parameters.\n    *\n    * @returns Parsed UI settings data.\n    */\n   #parseSettings({ efx = 'ripple', storage }: TJSGameSettingsWithUI.Options.Create = {}): TJSGameSettingsWithUI.Data\n   {\n      const namespace: string = this.#settings.namespace;\n\n      if (storage && typeof namespace !== 'string')\n      {\n         console.warn(\n          `TJSGameSettings warning: 'options.storage' defined, but 'namespace' not defined in TJSGameSettings.`);\n      }\n\n      const hasStorage: boolean = storage !== void 0 && typeof namespace === 'string';\n\n      const uiSettings: TJSGameSettingsWithUI.UISetting.Data[] = [];\n\n      const canConfigure: boolean = globalThis.game.user.can('SETTINGS_MODIFY');\n\n      for (const setting of this.#settings.data())\n      {\n         if (!isObject(setting.options) || !setting.options.config ||\n          (!canConfigure && (setting.options.scope !== 'client')))\n         {\n            continue;\n         }\n\n         let options: { value: string, label: string }[] | undefined;\n\n         if (isObject(setting.options.choices))\n         {\n            options = Object.entries(setting.options.choices).map((entry: [string, string]):\n             { value: string, label: string } => ({ value: entry[0], label: localize(entry[1]) }));\n         }\n\n         let range: { min: number, max: number, step: number } | undefined;\n         if (isObject(setting.options.range))\n         {\n            // Verify range data.\n            if (typeof setting.options.range.min !== 'number')\n            {\n               throw new TypeError(`Setting 'options.range.min' is not a number.`);\n            }\n\n            if (typeof setting.options.range.max !== 'number')\n            {\n               throw new TypeError(`Setting 'options.range.max' is not a number.`);\n            }\n\n            if (setting.options.range.step !== void 0 && typeof setting.options.range.step !== 'number')\n            {\n               throw new TypeError(`Setting 'options.range.step' is not a number.`);\n            }\n\n            range = {\n               min: setting.options.range.min,\n               max: setting.options.range.max,\n               step: setting.options.range.step ?? 1\n            };\n         }\n\n         // Default to `String` if no type is provided.\n         const type: string = setting.options.type instanceof Function ? setting.options.type.name : 'String';\n\n         // Only configure file picker if setting type is a string.\n         let filePicker: string | undefined;\n         if (type === 'String')\n         {\n            switch (typeof setting.options.filePicker)\n            {\n               case 'boolean':\n                  filePicker = setting.options.filePicker ? 'any' : void 0;\n                  break;\n\n               case 'string':\n                  filePicker = setting.options.filePicker;\n                  break;\n            }\n         }\n\n         let buttonData: TJSGameSettingsWithUI.UISetting.ButtonData | undefined;\n         if (filePicker)\n         {\n            buttonData = {\n               icon: 'fas fa-file-import fa-fw',\n               efx: efx === 'ripple' ? ripple() : void 0,\n               title: 'FILES.BrowseTooltip',\n               styles: { 'margin-left': '0.25em' }\n            };\n         }\n\n         const store: MinimalWritable<unknown> = this.#settings.getStore(setting.key)!;\n\n         let selectData: TJSGameSettingsWithUI.UISetting.SelectData | undefined;\n\n         let componentType: string = 'text';\n\n         if (setting.options.type === Boolean)\n         {\n            componentType = 'checkbox';\n         }\n         else if (options !== void 0)\n         {\n            componentType = 'select';\n\n            selectData = {\n               store,\n               efx: efx === 'ripple' ? rippleFocus() : void 0,\n               type: componentType,\n               options\n            };\n         }\n         else if (setting.options.type === Number)\n         {\n            componentType = isObject(setting.options.range) ? 'range' : 'number';\n         }\n\n         let inputData: TJSGameSettingsWithUI.UISetting.InputData | undefined;\n\n         if (componentType === 'text' || componentType === 'number')\n         {\n            inputData = {\n               store,\n               efx: efx === 'ripple' ? rippleFocus() : void 0,\n               type: componentType\n            };\n         }\n\n         uiSettings.push({\n            id: `${setting.namespace}.${setting.key}`,\n            namespace: setting.namespace,\n            folder: setting.folder,\n            key: setting.key,\n            name: localize(setting.options?.name ?? ''),\n            hint: localize(setting.options?.hint ?? ''),\n            type,\n            componentType,\n            filePicker,\n            range,\n            store,\n            initialValue: globalThis.game.settings.get(setting.namespace, setting.key),\n            scope: setting.options.scope,\n            requiresReload: typeof setting.options.requiresReload === 'boolean' ? setting.options.requiresReload :\n             false,\n            buttonData,\n            inputData,\n            selectData\n         });\n      }\n\n      // If storage is available then create a key otherwise create a dummy store, so `applyScrolltop` works.\n      const storeScrollbar: Writable<number> = hasStorage && storage ?\n       storage.getStore(`${namespace}-settings-scrollbar`) : writable(0);\n\n      const topLevel: TJSGameSettingsWithUI.UISetting.Data[] = [];\n\n      const folderData: { [key: string]: TJSGameSettingsWithUI.UISetting.Data[] } = {};\n\n      // Sort into folders\n      for (const setting of uiSettings)\n      {\n         if (typeof setting.folder === 'string')\n         {\n            const folderName: string = localize(setting.folder);\n\n            // Create folder array if one doesn't exist already.\n            if (!Array.isArray(folderData[folderName])) { folderData[folderName] = []; }\n            folderData[folderName].push(setting);\n         }\n         else // Add to 'toplevel' settings\n         {\n            topLevel.push(setting);\n         }\n      }\n\n      // Convert folderData object to array.\n      const folders: TJSGameSettingsWithUI.Data.Folder[] = Object.entries(folderData).map(\n       (entry: [string, TJSGameSettingsWithUI.UISetting.Data[]]): TJSGameSettingsWithUI.Data.Folder =>\n      {\n         return {\n            label: entry[0],\n            store: hasStorage && storage ? storage.getStore(`${namespace}-settings-folder-${entry[0]}`) : void 0,\n            settings: entry[1],\n         };\n      });\n\n      const sections: TJSGameSettingsWithUI.Data.Section[] = [];\n\n      // Parse custom component sections\n      for (const section of this.#sections)\n      {\n         const parsedSection: TJSGameSettingsWithUI.Data.Section = {\n            class: section.class,\n            props: section.props,\n            styles: section.styles\n         };\n\n         if (typeof section.folder === 'string')\n         {\n            const label = localize(section.folder);\n\n            parsedSection.folder = {\n               label,\n               store: hasStorage && storage ? storage.getStore(`${namespace}-settings-folder-${label}`) : void 0\n            };\n         }\n         else if (isObject(section.folder))\n         {\n            const label = localize(section.folder.label);\n\n            parsedSection.folder = {\n               label,\n               store: hasStorage && storage ? storage.getStore(`${namespace}-settings-folder-${label}`) : void 0,\n               summaryEnd: section.folder.summaryEnd,\n               styles: section.folder.styles\n            };\n         }\n\n         sections.push(parsedSection);\n      }\n\n      return {\n         storeScrollbar,\n         topLevel,\n         folders,\n         sections\n      };\n   }\n\n   async #reloadConfirm({ world = false } = {})\n   {\n      let title = localize('SETTINGS.ReloadPromptTitle');\n      let label = localize('SETTINGS.ReloadPromptBody');\n\n      // Foundry v9 doesn't have the reload lang keys, so substitute just for English translation.\n      // TODO: FOUNDRY_V9 - remove when support for v9 is dropped.\n      title = title !== 'SETTINGS.ReloadPromptTitle' ? title : 'Reload Application?';\n      label = label !== 'SETTINGS.ReloadPromptBody' ? label :\n       'Some of the changed settings require a reload of the application to take effect. Would you like to reload now?';\n\n      const reload = await TJSDialog.confirm({\n         modal: true,\n         draggable: false,\n         title,\n         content: `<p>${label}</p>`\n      });\n\n      if (!reload) { return; }\n\n      // Reload all connected clients. Note: Foundry v9 might not support this event.\n      if (world && globalThis.game.user.isGM) { globalThis.game.socket.emit('reload'); }\n\n      // Reload locally.\n      window.location.reload();\n   }\n\n   /**\n    * Convenience method to swap `showSettings`.\n    *\n    * @returns {boolean} New `showSettings` state.\n    */\n   swapShowSettings()\n   {\n      this.#showSettings = !this.#showSettings;\n      this.#showSettingsSet(this.#showSettings);\n      return this.#showSettings;\n   }\n}\n","import { TJSGameSettings }       from '#runtime/svelte/store/fvtt/settings';\n\nimport { UIControlImpl }         from './UIControlImpl';\n\nimport type {\n   Readable,\n   Writable }                    from 'svelte/store';\n\nimport type { MinimalWritable }  from '#runtime/svelte/store/util';\nimport type { WebStorage }       from '#runtime/svelte/store/web-storage';\nimport type { TJSSvelte }        from '#runtime/svelte/util';\n\n/**\n * Extends {@link TJSGameSettings} with UI control for working with\n * {@link #standard/component/fvtt/settings!TJSSettingsEdit} and\n * {@link #standard/component/fvtt/settings!TJSSettingsSwap}\n * components. Instead of extending `TJSGameSettings` simply extend `TJSGameSettingsWithUI` instead when creating\n * reactive game settings that utilize the above components.\n *\n * There are additional game settings options for separating settings into folders. Please see\n * {@link TJSGameSettingsWithUI.Options.ExtraProps}.\n */\nclass TJSGameSettingsWithUI extends TJSGameSettings<TJSGameSettingsWithUI.Options.ExtraProps>\n{\n   /**\n    */\n   readonly #uiControl: TJSGameSettingsWithUI.UIControl;\n\n   /**\n    * Creates the TJSGameSettingsWithUI instance.\n    *\n    * @param namespace - The namespace for all settings.\n    */\n   constructor(namespace: string)\n   {\n      super(namespace);\n\n      this.#uiControl = new UIControlImpl(this);\n   }\n\n   override register(setting: TJSGameSettingsWithUI.Options.GameSetting): void\n   {\n      if (setting?.folder !== void 0 && typeof setting.folder !== 'string')\n      {\n         throw new TypeError(`TJSGameSettingsWithUI - register: 'folder' attribute is not a string.`);\n      }\n\n      super.register(setting);\n   }\n\n   /**\n    * @returns The associated UIControl.\n    */\n   get uiControl(): TJSGameSettingsWithUI.UIControl\n   {\n      return this.#uiControl;\n   }\n}\n\ndeclare namespace TJSGameSettingsWithUI {\n   export namespace Data {\n      export type Folder = {\n         label: string;\n         settings: UISetting.Data[];\n         store?: MinimalWritable<boolean>;\n      };\n\n      export interface Section extends TJSSvelte.Config.Embed {\n         folder?: SectionFolder;\n         styles?: { [key: string]: string | null };\n      }\n\n      export type SectionFolder = {\n         label: string;\n         store?: MinimalWritable<boolean>;\n         summaryEnd?: TJSSvelte.Config.Embed;\n         styles?: { [key: string]: string | null };\n      };\n   }\n\n   export type Data = {\n      /**\n       * Sorted folders with associated settings and label.\n       */\n      folders: Data.Folder[];\n\n      /**\n       * Top level settings data.\n       */\n      topLevel: UISetting.Data[];\n\n      /**\n       * Custom sections.\n       */\n      sections: Data.Section[];\n\n      /**\n       * The store for `applyScrolltop`.\n       */\n      storeScrollbar: Writable<number>;\n\n      /**\n       * The bound destroy callback function for received of `TJSGameSettingsWithUI.Data` instance.\n       */\n      destroy?: Function;\n   };\n\n   export namespace Options {\n      export type Create = {\n         /**\n          * Defines the effects added to TJS components; ripple by default.\n          */\n         efx?: string;\n\n         /**\n          * TRL WebStorage (session) instance to serialize folder state and scrollbar position.\n          */\n         storage?: WebStorage;\n      };\n\n      export interface CustomSection extends TJSSvelte.Config.Embed {\n         /**\n          * Inline styles for the section element.\n          */\n         styles?: { [key: string]: string | null };\n\n         /**\n          * A folder label or CustomSectionFolder object.\n          */\n         folder?: string | CustomSectionFolder;\n      }\n\n      export type CustomSectionFolder = {\n         /**\n          * The folder label.\n          */\n         label: string;\n\n         /**\n          * A Svelte component config object defining TJSSvgFolder summary end component.\n          */\n         summaryEnd?: TJSSvelte.Config.Embed;\n\n         /**\n          * Inline styles for the `TJSSvgFolder`; useful for setting CSS variables.\n          */\n         styles?: { [key: string]: string | null };\n      };\n\n      /**\n       * Defines extra props that are available to set for game setting with UI options and data.\n       */\n      export interface ExtraProps {\n         /**\n          * The name of the `TJSSvgFolder` to put this setting in to group them.\n          */\n         folder?: string;\n      }\n\n      /**\n       * Defines the game setting with UI options for {@link TJSGameSettings.register}.\n       */\n      export interface GameSetting extends TJSGameSettings.Options.GameSetting<ExtraProps> {}\n   }\n\n   export namespace UISetting {\n      export type Data = {\n         id: string;\n         namespace: string;\n         folder?: string;\n         key: string;\n         name: string;\n         hint: string;\n         type: string;\n         componentType: string;\n         filePicker?: string;\n         range?: { min: number, max: number, step: number };\n         store: MinimalWritable<unknown>;\n         initialValue: any;\n         scope: 'client' | 'world';\n         requiresReload?: boolean;\n         buttonData?: ButtonData;\n         inputData?: InputData;\n         selectData?: SelectData;\n      };\n\n      export type ButtonData = {\n         efx?: Function;\n         icon: string;\n         styles?: { [key: string]: string | null }\n         title: string;\n      };\n\n      export type InputData = {\n         efx?: Function;\n         store: MinimalWritable<unknown>;\n         type: string;\n      };\n\n      export type SelectData = {\n         efx?: Function;\n         options: { value: string, label: string }[];\n         store: MinimalWritable<unknown>;\n         type: string;\n      };\n   }\n\n   /**\n    * Controls preparation and processing of registered game settings w/ TJSGameSettings. Game settings are parsed\n    * for UI display by TJSSettingsEdit. The store `showSettings` is utilized in TJSSettingsSwap component to provide\n    * an easy way to flip between settings component or any main slotted component.\n    */\n   export interface UIControl\n   {\n      /**\n       * @returns Returns the managed stores.\n       */\n      get stores(): {\n         showSettings: Readable<boolean>;\n      };\n\n      /**\n       * @returns Current `showSettings` state.\n       */\n      get showSettings(): boolean;\n\n      /**\n       * Sets current `showSettings` state.\n       *\n       * @param showSettings - New `showSettings` state.\n       */\n      set showSettings(showSettings: boolean);\n\n      /**\n       * Adds a custom section / folder defined by the provided TJSSettingsCustomSection options object.\n       *\n       * @param options - The configuration object for the custom section.\n       */\n      addSection(options: Options.CustomSection): void;\n\n      /**\n       * Creates the UISettingsData object by parsing stored settings in\n       *\n       * @param [options] - Optional parameters.\n       *\n       * @returns Parsed UI settings data.\n       */\n      create(options?: Options.Create): TJSGameSettingsWithUI.Data;\n\n      /**\n       * Convenience method to swap `showSettings`.\n       *\n       * @returns New `showSettings` state.\n       */\n      swapShowSettings(): boolean;\n   }\n}\n\nexport {\n   TJSGameSettingsWithUI\n}\n","import { getFormat }          from '#runtime/data/color/colord';\nimport { isObject }           from '#runtime/util/object';\n\nimport type { TJSThemeStore } from './TJSThemeStore';\n\nexport class DataValidator\n{\n   private constructor() {}\n\n   /**\n    * This regex tests for correct CSS variable names according to the CSS specification.\n    *\n    * @see https://www.w3.org/TR/css-variables-1/#defining-variables\n    * @see https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n    */\n   static #REGEX_CSS_VAR_NAME: RegExp =\n    /--(?:[_a-zA-Z\\u00A0-\\uFFFF]|\\\\[0-9a-fA-F]{1,6})(?:[\\w\\u00A0-\\uFFFF-]|\\\\[0-9a-fA-F]{1,6})*/;\n\n   static #SET_TYPES: Set<string> = new Set(['color']);\n\n   /**\n    * Parses and verifies a component entry.\n    *\n    * @param entry - A component entry.\n    *\n    * @param {number}   cntr - Current component entry counter.\n    *\n    * @returns {object} Parsed and verified component entry.\n    */\n   static componentEntry(entry: TJSThemeStore.Component, cntr: number): TJSThemeStore.Component\n   {\n      const result: TJSThemeStore.Component = Object.assign({}, entry);\n\n      if (!isObject(entry))\n      {\n         throw new TypeError(`TJSThemeStore initialize error: data[${cntr}] entry is not an object.`);\n      }\n\n      if (typeof entry.label !== 'string')\n      {\n         throw new Error(\n          `TJSThemeStore initialize error: data[${cntr}] 'entry.label' is not a string.`);\n      }\n\n      if (typeof entry.type !== 'string')\n      {\n         throw new Error(\n          `TJSThemeStore initialize error: data[${cntr}] 'entry.type' is not a string.`);\n      }\n\n      if (!this.#SET_TYPES.has(entry.type))\n      {\n         throw new Error(`TJSThemeStore initialize error: data[${cntr}] 'entry.type' unknown.`);\n      }\n\n      if (entry.var !== void 0 && typeof entry.var !== 'string')\n      {\n         throw new TypeError(`TJSThemeStore initialize error: data[${cntr}] 'entry.var' is not a string.`);\n      }\n\n      // Handle common data for CSS variable entries.\n      if (typeof entry.var === 'string')\n      {\n         // Test for valid CSS variable name\n         if (!this.#REGEX_CSS_VAR_NAME.test(entry.var))\n         {\n            throw new Error(\n             `TJSThemeStore initialize error: data[${cntr}] 'entry.var' is not a valid CSS variable name.`);\n         }\n\n         if (typeof entry.default !== 'string')\n         {\n            throw new TypeError(`TJSThemeStore initialize error: data[${cntr}] 'entry.default' is not a string.`);\n         }\n      }\n\n      switch (entry.type)\n      {\n         case 'color':\n         {\n            // Verify that default value is a supported color format.\n            const format = entry.default ? getFormat(entry.default) : void 0;\n            if (!format)\n            {\n               throw new Error(`TJSThemeStore initialize error: data[${cntr}] 'entry.default' unknown color format.`);\n            }\n\n            // Add the color format to entry result data.\n            result.format = format;\n            break;\n         }\n      }\n\n      return result;\n   }\n}\n","import { writable }        from 'svelte/store';\n\nimport { getFormat }       from '#runtime/data/color/colord';\nimport { TJSGameSettings } from '#runtime/svelte/store/fvtt/settings';\nimport { propertyStore }   from '#runtime/svelte/store/writable-derived';\nimport { TJSStyleManager } from '#runtime/util/dom/style';\nimport { validate }        from '#runtime/util/semver';\n\nimport {\n   isIterable,\n   isObject }              from '#runtime/util/object';\n\nimport { DataValidator }   from './DataValidator';\n\nimport type {\n   Readable,\n   Subscriber,\n   Unsubscriber,\n   Writable }              from 'svelte/store';\n\n/**\n * Must be constructed from a TJSGameSettings instance `init` / initialize method called from the `ready` Foundry VTT\n * hook.\n */\nclass TJSThemeStore\n{\n   /**\n    */\n   #components: TJSThemeStore.Component[] = [];\n\n   /**\n    */\n   #data: TJSThemeStore.Data = {};\n\n   #defaultThemeData: TJSThemeStore.Data = {};\n\n   #initialThemeData: TJSThemeStore.Data = {};\n\n   #storeComponents: Readable<TJSThemeStore.Component[]> = { subscribe: writable(this.#components).subscribe };\n\n   /**\n    * All property stores.\n    */\n   #storeProps: { [key: string]: Writable<string | null> } = {};\n\n   /**\n    */\n   #styleManager: TJSStyleManager;\n\n   /**\n    * Stores the subscribers.\n    */\n   #subscribers: Subscriber<TJSThemeStore.Data>[] = [];\n\n   /**\n    * Stores all CSS variable keys.\n    */\n   #vars: string[] = [];\n\n   /**\n    * Current theme version.\n    */\n   #version: string;\n\n   /**\n    * @param options - Options\n    */\n   constructor(options: TJSThemeStore.Options)\n   {\n      if (!isObject(options)) { throw new TypeError(`'options' is not an object.`); }\n\n      if (typeof options.namespace !== 'string') { throw new TypeError(`'namespace' attribute is not a string.`); }\n\n      if (typeof options.key !== 'string') { throw new TypeError(`'key' attribute is not a string.`); }\n\n      if (!(options.gameSettings instanceof TJSGameSettings))\n      {\n         throw new TypeError(`'gameSettings' attribute is not an instance of TJSGameSettings.`);\n      }\n\n      if (!(options.styleManager instanceof TJSStyleManager))\n      {\n         throw new TypeError(`'styleManager' attribute is not an instance of TJSStyleManager.`);\n      }\n\n      if (!isObject(options.config)) { throw new TypeError(`'config' attribute is not an object. `); }\n\n      if (typeof options.config.version !== 'string')\n      {\n         throw new TypeError(`'config.version' attribute is not a string`);\n      }\n\n      if (!validate(options.config.version))\n      {\n         throw new Error(`'config.version' attribute is not a valid semantic version string.`);\n      }\n\n      this.#version = options.config.version;\n\n      if (!isIterable(options.config.components))\n      {\n         throw new TypeError(`'config.components' attribute is not an iterable list. `);\n      }\n\n      this.#styleManager = options.styleManager;\n\n      this.#initialize(options);\n   }\n\n   /**\n    * @returns A readable store of all components.\n    */\n   get components(): Readable<TJSThemeStore.Component[]> { return this.#storeComponents; }\n\n   /**\n    * @returns All property stores.\n    */\n   get properties(): { [key: string]: Writable<string | null> }\n   {\n      return this.#storeProps;\n   }\n\n   /**\n    * Parse `options.config` and initialize game setting for theme data.\n    *\n    * @param options -\n    */\n   #initialize(options: TJSThemeStore.Options): void\n   {\n      this.#defaultThemeData = {};\n      this.#initialThemeData = Object.assign({}, this.#defaultThemeData);\n\n      let cntr: number = 0;\n\n      // Process component / vars data.\n      for (let entry of options.config.components)\n      {\n         // Validate entry, but also adds additional information based on data types; IE `format` for `color`.\n         entry = DataValidator.componentEntry(entry, cntr);\n\n         // Add var key if defined.\n         if (typeof entry.var === 'string')\n         {\n            const key: string = entry.var;\n\n            this.#vars.push(key);\n            this.#storeProps[key] = propertyStore(this, key);\n            this.#components.push(Object.assign({}, entry, { store: this.#storeProps[key] }));\n\n            if (typeof entry.default === 'string') { this.#defaultThemeData[key] = entry.default; }\n         }\n         else\n         {\n            this.#components.push(Object.assign({}, entry));\n         }\n\n         cntr++;\n      }\n\n      // Set initial data to default here just in case the game setting entry is invalid upon registration / IE null.\n      this.#initialThemeData = Object.assign({}, this.#defaultThemeData);\n\n      options.gameSettings.register({\n         namespace: options.namespace,\n         key: options.key,\n         store: this,\n         options: {\n            scope: 'world',\n            config: false,\n            default: Object.assign({}, this.#defaultThemeData),\n            type: Object\n         }\n      });\n\n      // Retrieve existing data from stored word setting.\n      this.#initialThemeData = game.settings.get(options.namespace, options.key);\n\n      // Validate initial theme data and set to default if it fails to validate.\n      if (!this.#validateThemeData(this.#initialThemeData, false))\n      {\n         console.warn(\n          `TJSThemeStore warning: Initial theme data invalid. Setting to default data.`);\n\n         this.#initialThemeData = Object.assign({}, this.#defaultThemeData);\n\n         this.set(Object.assign({}, this.#initialThemeData));\n      }\n   }\n\n   /**\n    * Sets the theme store with new data.\n    *\n    * @param themeData -\n    *\n    * @returns This theme store instance.\n    */\n   set(themeData: TJSThemeStore.Data): this\n   {\n      if (!this.#validateThemeData(themeData))\n      {\n         themeData = Object.assign({}, this.#initialThemeData);\n      }\n\n      for (const key of this.#vars)\n      {\n         if (key in themeData)\n         {\n            const keyData: string = themeData[key];\n\n            this.#data[key] = keyData;\n            this.#styleManager.setProperty(key, keyData);\n         }\n      }\n\n      this.#updateSubscribers();\n\n      return this;\n   }\n\n   /**\n    * Validates the given theme data object ensuring that all parameters are found and are correct HSVA values.\n    *\n    * @param themeData -\n    *\n    * @param [warn] - When true post warning message.\n    *\n    * @returns Validation status.\n    */\n   #validateThemeData(themeData: TJSThemeStore.Data, warn: boolean = true): boolean\n   {\n      if (!isObject(themeData))\n      {\n         if (warn)\n         {\n            console.warn(`TJSThemeStore warning: 'theme' data is not an object resetting to initial data.`);\n         }\n\n         return false;\n      }\n\n      for (const key of this.#vars)\n      {\n         const data: string = themeData[key];\n\n         if (getFormat(data) !== 'hsl')\n         {\n            if (warn)\n            {\n               console.warn(`TJSThemeStore warning: data for property '${\n                key}' is not a HSL color string. Resetting to initial data.`);\n            }\n\n            return false;\n         }\n      }\n\n      return true;\n   }\n\n   // ------------\n\n   /**\n    * Updates all subscribers\n    */\n   #updateSubscribers()\n   {\n      const data = Object.assign({}, this.#data);\n\n      // Early out if there are no subscribers.\n      if (this.#subscribers.length > 0)\n      {\n         for (let cntr = 0; cntr < this.#subscribers.length; cntr++) { this.#subscribers[cntr](data); }\n      }\n   }\n\n   /**\n    * @param handler - Callback function that is invoked on update / changes. Receives copy of the theme data.\n    *\n    * @returns Unsubscribe function.\n    */\n   subscribe(handler: Subscriber<TJSThemeStore.Data>): Unsubscriber\n   {\n      this.#subscribers.push(handler); // add handler to the array of subscribers\n\n      handler(Object.assign({}, this.#data));                     // call handler with current value\n\n      // Return unsubscribe function.\n      return (): void =>\n      {\n         const index = this.#subscribers.findIndex((sub) => sub === handler);\n         if (index >= 0) { this.#subscribers.splice(index, 1); }\n      };\n   }\n}\n\ndeclare namespace TJSThemeStore {\n   export type Component = {\n      /**\n       * An optional default value for a CSS variable.\n       */\n      default?: string;\n\n      /**\n       * Associated color format. Set after initialization.\n       */\n      format?: string;\n\n      /**\n       * An optional label for any variable / setting related component.\n       */\n      label?: string;\n\n      /**\n       * The assigned store when applicable for a CSS variable. Set after initialization.\n       */\n      store?: Writable<string | null>\n\n      /**\n       * Type of component / variable.\n       */\n      type: string;\n\n      /**\n       * A CSS variable name.\n       */\n      var?: string;\n   };\n\n   /**\n    * Theme store data; CSS variable names to value.\n    */\n   export type Data = { [key: string]: string };\n\n   export type Config = {\n      /**\n       * An iterable list of theme store component data.\n       */\n      components: Iterable<Component>;\n\n      /**\n       * A semantic version string.\n       */\n      version: string;\n   };\n\n   export interface Options {\n      /**\n       * Data defining CSS theme store components and variables.\n       */\n      config: Config;\n\n      /**\n       * An associated TJSGameSettings instance.\n       */\n      gameSettings: TJSGameSettings;\n\n      /**\n       * The world game setting key.\n       */\n      key: string;\n\n      /**\n       * The world setting namespace.\n       */\n      namespace: string;\n\n      /**\n       * An associated TJSStyleManager instance to manipulate CSS variables.\n       */\n      styleManager: TJSStyleManager;\n   }\n}\n\nexport { TJSThemeStore }\n"],"names":[],"mappings":"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"}