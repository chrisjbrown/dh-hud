{
  "version": 3,
  "sources": ["../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-svelte/runtime-base/_dist/svelte/store/web-storage/index.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/svelte/component/internal/dialog/DialogContent.svelte", "../../node_modules/@typhonjs-fvtt/runtime/_dist/svelte/component/internal/dialog/DialogShell.svelte", "../../node_modules/@typhonjs-fvtt/runtime/node_modules/@typhonjs-svelte/runtime-base/_dist/util/async/index.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/state-app/ApplicationState.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/state-svelte/GetSvelteData.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/state-reactive/SvelteReactive.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/util/applicationShellContract.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/util/isApplicationShell.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/util/loadSvelteConfig.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/TJSAppIndex.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/external/FoundryHMRSupport.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/SvelteApp.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/external/PopoutSupport.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/internal/state-dialog/TJSDialogData.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/TJSDialog.js", "../../node_modules/@typhonjs-fvtt/runtime/_dist/src/application/index.js"],
  "sourcesContent": ["import { writable, get } from 'svelte/store';\nimport { CrossWindow } from '@typhonjs-svelte/runtime-base/util/browser';\n\n/**\n * Generates derived, readable, writable helper functions wrapping the given Storage API provided with any additional\n * customization for data serialization. By default, JSON serialization is used.\n *\n * @param {object}   opts - Generator options.\n *\n * @param {Storage}  opts.storage - The web storage source.\n *\n * @param {(value: any, ...rest: any[]) => string}  [opts.serialize] - Replace with custom serialization;\n *        default: `JSON.stringify`.\n *\n * @param {(value: string, ...rest: any[]) => any}  [opts.deserialize] - Replace with custom deserialization;\n *        default: `JSON.parse`.\n *\n * @returns {StorageStores} A complete set of store helper functions and associated storage API instance and\n *          serialization strategy.\n */\nfunction storeGenerator({ storage, serialize = JSON.stringify, deserialize = JSON.parse }) {\n    function isSimpleDeriver(deriver) {\n        return deriver.length < 2;\n    }\n    function storageReadable(key, value, start) {\n        return {\n            subscribe: storageWritable(key, value, start).subscribe\n        };\n    }\n    function storageWritable(key, value, start) {\n        function wrap_start(ogSet) {\n            return start(function wrap_set(new_value) {\n                if (storage) {\n                    storage.setItem(key, serialize(new_value));\n                }\n                return ogSet(new_value);\n            }, function wrap_update(fn) {\n                set(fn(get(ogStore)));\n            });\n        }\n        if (storage) {\n            const storageValue = storage.getItem(key);\n            try {\n                if (storageValue) {\n                    value = deserialize(storageValue);\n                }\n            }\n            catch (err) { /**/ }\n            storage.setItem(key, serialize(value));\n        }\n        const ogStore = writable(value, start ? wrap_start : void 0);\n        function set(new_value) {\n            if (storage) {\n                storage.setItem(key, serialize(new_value));\n            }\n            ogStore.set(new_value);\n        }\n        function update(fn) {\n            set(fn(get(ogStore)));\n        }\n        function subscribe(run, invalidate) {\n            return ogStore.subscribe(run, invalidate);\n        }\n        return { set, update, subscribe };\n    }\n    function storageDerived(key, stores, fn, initial_value) {\n        const single = !Array.isArray(stores);\n        const stores_array = single ? [stores] : stores;\n        if (storage && storage.getItem(key)) {\n            try {\n                initial_value = deserialize(storage.getItem(key));\n            }\n            catch (err) { /**/ }\n        }\n        return storageReadable(key, initial_value, (set, update) => {\n            let inited = false;\n            const values = [];\n            let pending = 0;\n            let cleanup;\n            const sync = () => {\n                if (pending) {\n                    return;\n                }\n                cleanup?.();\n                const input = single ? values[0] : values;\n                if (isSimpleDeriver(fn)) {\n                    set(fn(input));\n                }\n                else {\n                    const result = fn(input, set, update);\n                    if (typeof result === 'function') {\n                        cleanup = result;\n                    }\n                }\n            };\n            const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {\n                values[i] = value;\n                pending &= ~(1 << i);\n                if (inited) {\n                    sync();\n                }\n            }, () => { pending |= (1 << i); }));\n            inited = true;\n            sync();\n            return function stop() {\n                // Equivalent to run_all from Svelte internals.\n                unsubscribers.forEach((unsubscriber) => unsubscriber());\n                cleanup?.();\n            };\n        });\n    }\n    return {\n        readable: storageReadable,\n        writable: storageWritable,\n        derived: storageDerived,\n        storage,\n        serialize,\n        deserialize\n    };\n}\n\n/**\n * Provides all Storage API enabled `localStorage` store helper functions. Data is serialized as JSON.\n */\nconst localStores = storeGenerator({ storage: globalThis?.localStorage });\n/**\n * Provides the Storage API enabled derived `localStorage` store helper function. Data is serialized as JSON.\n */\nlocalStores.derived;\n/**\n * Provides the Storage API enabled readable `localStorage` store helper function. Data is serialized as JSON.\n */\nlocalStores.readable;\n/**\n * Provides the Storage API enabled writable `localStorage` store helper function. Data is serialized as JSON.\n */\nlocalStores.writable;\n\n/**\n * Provides all Storage API enabled `sessionStorage` store helper functions. Data is serialized as JSON.\n */\nconst sessionStores = storeGenerator({ storage: globalThis?.sessionStorage });\n/**\n * Provides the Storage API enabled derived `sessionStorage` store helper function. Data is serialized as JSON.\n */\nsessionStores.derived;\n/**\n * Provides the Storage API enabled readable `sessionStorage` store helper function. Data is serialized as JSON.\n */\nsessionStores.readable;\n/**\n * Provides the Storage API enabled writable `sessionStorage` store helper function. Data is serialized as JSON.\n */\nsessionStores.writable;\n\n/**\n * Provides the base Storage API store manager. It is recommended to use {@link TJSLocalStorage} &\n * {@link TJSSessionStorage} for standard browser local and session storage use cases. TJSWebStorage exists\n * to provide additional customization options for custom Storage API compatible storage instances and custom\n * serialization configuration.\n *\n * @implements {import('./types').WebStorage}\n */\nclass TJSWebStorage\n{\n   /** @type {import('./').StorageStores} */\n   #storageStores;\n\n   /**\n    * @type {(Map<string, {\n    *    store: import('svelte/store').Writable,\n    *    deserialize?: (value: string, ...rest: any[]) => any,\n    *    serialize?: (value: any, ...rest: any[]) => string\n    * }>)}\n    */\n   #stores = new Map();\n\n   /**\n    * @param {import('./').StorageStores} storageStores - Provides a complete set of\n    *        storage API store helper functions and the associated storage API instance and serializations strategy.\n    */\n   constructor(storageStores)\n   {\n      this.#storageStores = storageStores;\n   }\n\n   /**\n    * Creates a new store for the given key.\n    *\n    * @template T\n    *\n    * @param {string}   key - Key to lookup in stores map.\n    *\n    * @param {T}        [defaultValue] - A default value to set for the store.\n    *\n    * @param {import('./').StorageStores} [storageStores] - Additional store creation options.\n    *\n    * @returns {import('svelte/store').Writable<T>} The new store.\n    */\n   #createStore(key, defaultValue = void 0, storageStores)\n   {\n      try\n      {\n         const value = this.#storageStores.storage.getItem(key);\n         if (value !== null)\n         {\n            const deserialize = storageStores?.deserialize ?? this.#storageStores.deserialize;\n            defaultValue = deserialize(value);\n         }\n      }\n      catch (err) { /**/ }\n\n      const writable = storageStores?.writable ?? this.#storageStores.writable;\n\n      return writable(key, defaultValue);\n   }\n\n   /**\n    * @param {string}   key - Storage key.\n    *\n    * @returns {(value: string, ...rest: any[]) => any} Deserialize function.\n    */\n   #getDeserialize(key)\n   {\n      return this.#stores.get(key)?.deserialize ?? this.#storageStores.deserialize;\n   }\n\n   /**\n    * @param {string}   key - Storage key.\n    *\n    * @returns {(value: any, ...rest: any[]) => string} Serialize function.\n    */\n   #getSerialize(key)\n   {\n      return this.#stores.get(key)?.serialize ?? this.#storageStores.serialize;\n   }\n\n   /**\n    * Gets a store from the `stores` Map or creates a new store for the key and a given default value.\n    *\n    * @template T\n    *\n    * @param {string}   key - Key to lookup in stores map.\n    *\n    * @param {T}        [defaultValue] - A default value to set for the store.\n    *\n    * @param {import('./').StorageStores} [storageStores] - Additional store creation options.\n    *\n    * @returns {import('svelte/store').Writable<T>} The store for the given key.\n    */\n   #getStore(key, defaultValue = void 0, storageStores)\n   {\n      const storeEntry = this.#stores.get(key);\n      if (storeEntry) { return storeEntry.store; }\n\n      const store = this.#createStore(key, defaultValue, storageStores);\n\n      // Set any key specific storage helper details.\n      this.#stores.set(key, {\n         store,\n         deserialize: storageStores?.deserialize,\n         serialize: storageStores?.serialize\n      });\n\n      return store;\n   }\n\n   /**\n    * Get value from the storage API.\n    *\n    * @param {string}   key - Key to lookup in storage API.\n    *\n    * @param {*}        [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {*} Value from session storage or if not defined any default value provided.\n    */\n   getItem(key, defaultValue)\n   {\n      let value = defaultValue;\n\n      const storageValue = this.#storageStores.storage.getItem(key);\n\n      if (storageValue !== null)\n      {\n         try\n         {\n            value = this.#getDeserialize(key)(storageValue);\n         }\n         catch (err)\n         {\n            value = defaultValue;\n         }\n      }\n      else if (defaultValue !== void 0)\n      {\n         try\n         {\n            const newValue = this.#getSerialize(key)(defaultValue);\n\n            // If there is no existing storage value and defaultValue is defined the storage value needs to be set.\n            this.#storageStores.storage.setItem(key, newValue);\n         }\n         catch (err) { /* */ }\n      }\n\n      return value;\n   }\n\n   /**\n    * Returns the backing Svelte store for the given key; potentially sets a default value if the key\n    * is not already set.\n    *\n    * @template T\n    *\n    * @param {string}   key - Key to lookup in storage API.\n    *\n    * @param {T}        [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @param {import('./').StorageStores} [storageStores] - Additional store creation options.\n    *\n    * @returns {import('svelte/store').Writable<T>} The Svelte store for this key.\n    */\n   getStore(key, defaultValue, storageStores)\n   {\n      return this.#getStore(key, defaultValue, storageStores);\n   }\n\n   /**\n    * Returns whether a store has already been created for the given key.\n    *\n    * @param {string}   key - Key to lookup in storage API.\n    */\n   hasStore(key)\n   {\n      return this.#stores.has(key);\n   }\n\n   /**\n    * Sets the value for the given key in storage API.\n    *\n    * @param {string}   key - Key to lookup in storage API.\n    *\n    * @param {*}        value - A value to set for this key.\n    */\n   setItem(key, value)\n   {\n      const store = this.#getStore(key);\n      store.set(value);\n   }\n\n   /**\n    * Convenience method to swap a boolean value stored in storage API updating the associated store value.\n    *\n    * @param {string}   key - Key to lookup in storage API.\n    *\n    * @param {boolean}  [defaultValue] - A default value to return if key not present in session storage.\n    *\n    * @returns {boolean} The boolean swap for the given key.\n    */\n   swapItemBoolean(key, defaultValue)\n   {\n      const store = this.#getStore(key, defaultValue);\n\n      let currentValue = false;\n\n      try\n      {\n         currentValue = !!this.#getDeserialize(key)(this.#storageStores.storage.getItem(key));\n      }\n      catch (err) { /**/ }\n\n      const newValue = typeof currentValue === 'boolean' ? !currentValue : false;\n\n      store.set(newValue);\n      return newValue;\n   }\n\n   // Iterators ------------------------------------------------------------------------------------------------------\n\n   /**\n    * @template T\n    *\n    * Returns an iterable for the session storage keys and stores.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter by storage keys.\n    *\n    * @returns {IterableIterator<[string, import('svelte/store').Writable<T>]>} Iterable iterator of keys and stores.\n    * @yields {import('svelte/store').Writable<[string, Writable<T>]>}\n    */\n   *entries(regex = void 0)\n   {\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#stores.size) { return void 0; }\n\n      if (regex)\n      {\n         for (const key of this.#stores.keys())\n         {\n            if (regex.test(key)) { yield [key, this.getStore(key)]; }\n         }\n      }\n      else\n      {\n         for (const key of this.#stores.keys()) { yield [key, this.getStore(key)]; }\n      }\n   }\n\n   /**\n    * Returns an iterable for the session storage keys from existing stores.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter by storage keys.\n    *\n    * @returns {IterableIterator<string>} Iterable iterator of session storage keys.\n    * @yields {string}\n    */\n   *keys(regex = void 0)\n   {\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#stores.size) { return void 0; }\n\n      if (regex)\n      {\n         for (const key of this.#stores.keys())\n         {\n            if (regex.test(key)) { yield key; }\n         }\n      }\n      else\n      {\n         for (const key of this.#stores.keys()) { yield key; }\n      }\n   }\n\n   /**\n    * @template T\n    *\n    * Returns an iterable for the session storage stores.\n    *\n    * @param {RegExp} [regex] - Optional regular expression to filter by storage keys.\n    *\n    * @returns {IterableIterator<import('svelte/store').Writable<T>>} Iterable iterator of stores.\n    * @yields {import('svelte/store').Writable<T>}\n    */\n   *stores(regex = void 0)\n   {\n      if (regex !== void 0 && !CrossWindow.isRegExp(regex)) { throw new TypeError(`'regex' is not a RegExp`); }\n\n      if (!this.#stores.size) { return void 0; }\n\n      if (regex)\n      {\n         for (const key of this.#stores.keys())\n         {\n            if (regex.test(key)) { yield this.getStore(key); }\n         }\n      }\n      else\n      {\n         for (const key of this.#stores.keys()) { yield this.getStore(key); }\n      }\n   }\n}\n\n/**\n * Provides a {@link TJSWebStorage} instance for standard browser local storage use cases.\n */\nclass TJSLocalStorage extends TJSWebStorage\n{\n   constructor()\n   {\n      super(localStores);\n   }\n}\n\n/**\n * Provides a {@link TJSWebStorage} instance for standard browser session storage use cases.\n */\nclass TJSSessionStorage extends TJSWebStorage\n{\n   constructor()\n   {\n      super(sessionStores);\n   }\n}\n\nexport { TJSLocalStorage, TJSSessionStorage, TJSWebStorage, localStores, sessionStores, storeGenerator };\n//# sourceMappingURL=index.js.map\n", null, null, "import { isIterable, isObject, safeAccess } from '@typhonjs-svelte/runtime-base/util/object';\nimport { CrossWindow } from '@typhonjs-svelte/runtime-base/util/browser';\n\n/**\n * Provides utility functions for retrieving data about images.\n */\nclass ImageData\n{\n   /**\n    * Loads given URLs into image elements returning those that resolved with width & height dimensions. This is useful\n    * when the size of an image is necessary before usage.\n    *\n    * @param {string | { url?: string } | Iterable<string | { url?: string }>} urls - A list of image URLS to load or\n    *        object with an `url` property.\n    *\n    * @param {object} [options] - Optional options.\n    *\n    * @param {string} [options.accessor='url'] - Accessor string to access child attribute when `urls` entry contains\n    *        objects.\n    *\n    * @param {boolean} [options.warn=false] - Log debug warnings when a target URL can not be determined; default: false.\n    *\n    * @returns {(Promise<{\n    *    fulfilled: { url: string, width: number, height: number }[],\n    *    rejected: { url: string }[]\n    * }>)} An object with `fulfilled` and `rejected` requests.\n    */\n   static async getDimensions(urls, { accessor = 'url', warn = false } = {})\n   {\n      const promises = [];\n      const fulfilled = [];\n      const rejected = [];\n\n      const targetURLs = isIterable(urls) ? urls : [urls];\n\n      for (const url of targetURLs)\n      {\n         let targetURL;\n\n         if (typeof url === 'string')\n         {\n            targetURL = url;\n         }\n         else if (isObject(url))\n         {\n            targetURL = safeAccess(url, accessor);\n         }\n\n         if (typeof targetURL !== 'string')\n         {\n            if (warn)\n            {\n               console.warn('ImageData.getDimensions warning: Failed to locate target URL.');\n            }\n\n            continue;\n         }\n\n         promises.push(new Promise((resolve, reject) =>\n         {\n            const img = new Image();\n            img.src = targetURL;\n\n            // Get the actual width / height of the image.\n            img.onload = () => resolve({ url: targetURL, width: img.naturalWidth, height: img.naturalHeight });\n            img.onerror = () => reject({ url: targetURL });\n         }));\n      }\n\n      const promiseResults = await Promise.allSettled(promises);\n\n      for (const result of promiseResults)\n      {\n         switch (result.status)\n         {\n            case 'fulfilled':\n               fulfilled.push(result.value);\n               break;\n\n            case 'rejected':\n               rejected.push(result.reason);\n               break;\n         }\n      }\n\n      return { fulfilled, rejected };\n   }\n}\n\n/**\n * Provides management of a single Promise that can be shared and accessed across JS & Svelte components. This allows a\n * Promise to be created and managed as part of the TRL application lifecycle and accessed safely in various control\n * flow scenarios. When resolution of the current managed Promise starts further interaction is prevented.\n *\n * Note: to enable debugging / log statements set the static `logging` variable to true.\n */\nclass ManagedPromise\n{\n   /** @type {boolean} */\n   static #logging = false;\n\n   /** @type {{ isProcessing?: boolean, promise?: Promise, reject: Function, resolve: Function }} */\n   #current;\n\n   /**\n    * @returns {boolean} Whether global logging is enabled.\n    */\n   static get logging()\n   {\n      return this.#logging;\n   }\n\n   /**\n    * @returns {boolean} Whether there is an active managed Promise.\n    */\n   get isActive()\n   {\n      return this.#current !== void 0;\n   }\n\n   /**\n    * @returns {boolean} Whether there is an active managed Promise and resolution is currently being processed.\n    */\n   get isProcessing()\n   {\n      return this.#current !== void 0 ? this.#current.isProcessing : false;\n   }\n\n   /**\n    * Sets global logging enabled state.\n    *\n    * @param {boolean}  logging - New logging enabled state.\n    */\n   static set logging(logging)\n   {\n      if (typeof logging !== 'boolean')\n      {\n         throw new TypeError(`[TRL] ManagedPromise.logging error: 'logging' is not a boolean.`);\n      }\n\n      this.#logging = logging;\n   }\n\n   // ----------------------------------------------------------------------------------------------------------------\n\n   /**\n    * Resolves any current Promise with undefined and creates a new current Promise.\n    *\n    * @template T\n    *\n    * @param {object} opts - Options.\n    *\n    * @param {boolean}  [opts.reuse=false] - When true if there is an existing live Promise it is returned immediately.\n    *\n    * @returns {Promise<T>} The new current managed Promise.\n    */\n   create({ reuse = false } = {})\n   {\n      if (typeof reuse !== 'boolean')\n      {\n         throw new TypeError(`[TRL] ManagedPromise.create error: 'reuse' is not a boolean.`);\n      }\n\n      if (reuse && this.#current !== void 0 && CrossWindow.isPromise(this.#current.promise))\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.create info: Reusing / returning existing managed Promise.`);\n         }\n\n         return this.#current.promise;\n      }\n\n      if (this.#current !== void 0)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(\n             `[TRL] ManagedPromise.create info: Creating a new Promise and resolving existing immediately.`);\n         }\n\n         this.#current.resolve(void 0);\n         this.#current = void 0;\n      }\n\n      const promise = new Promise((resolve, reject) =>\n      {\n         this.#current = {\n            isProcessing: false,\n            reject,\n            resolve\n         };\n      });\n\n      this.#current.promise = promise;\n\n      return promise;\n   }\n\n   /**\n    * Gets the current Promise if any.\n    *\n    * @returns {Promise<any>} Current Promise.\n    */\n   get()\n   {\n      return this.#current ? this.#current.promise : void 0;\n   }\n\n   /**\n    * Rejects the current Promise if applicable.\n    *\n    * @param {*}  [result] - Result to reject.\n    *\n    * @returns {boolean} Was the promise rejected.\n    */\n   reject(result = void 0)\n   {\n      // Early out as Promise resolution is currently processing.\n      if (this.#current !== void 0 && this.#current.isProcessing)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.reject info: Currently processing promise.`);\n         }\n\n         return true;\n      }\n\n      if (this.#current !== void 0)\n      {\n         this.#current.isProcessing = true;\n\n         if (CrossWindow.isPromise(result))\n         {\n            result.then((value) =>\n            {\n               this.#current.reject(value);\n               this.#current = void 0;\n            }).catch((err) =>\n            {\n               this.#current.reject(err);\n               this.#current = void 0;\n            });\n         }\n         else\n         {\n            this.#current.reject(result);\n            this.#current = void 0;\n         }\n\n         return true;\n      }\n      else\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.reject warning: No current managed Promise to reject.`);\n         }\n\n         return false;\n      }\n   }\n\n   /**\n    * Resolves the current Promise if applicable.\n    *\n    * @param {*}  [result] - Result to resolve.\n    *\n    * @returns {boolean} Was the promise resolved.\n    */\n   resolve(result = void 0)\n   {\n      // Early out as Promise resolution is currently processing.\n      if (this.#current !== void 0 && this.#current.isProcessing)\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.resolve info: Currently processing promise.`);\n         }\n\n         return true;\n      }\n\n      if (this.#current !== void 0)\n      {\n         if (CrossWindow.isPromise(result))\n         {\n            this.#current.isProcessing = true;\n\n            result.then((value) =>\n            {\n               this.#current.resolve(value);\n               this.#current = void 0;\n            }).catch((err) =>\n            {\n               this.#current.reject(err);\n               this.#current = void 0;\n            });\n         }\n         else\n         {\n            this.#current.resolve(result);\n            this.#current = void 0;\n         }\n\n         return true;\n      }\n      else\n      {\n         if (ManagedPromise.#logging)\n         {\n            console.warn(`[TRL] ManagedPromise.resolve warning: No current managed Promise to resolve.`);\n         }\n\n         return false;\n      }\n   }\n}\n\nexport { ImageData, ManagedPromise };\n//# sourceMappingURL=index.js.map\n", "import { isObject }  from '@typhonjs-fvtt/runtime/util/object';\n\n/**\n * Provides the ability the save / restore / serialize application state for positional and UI state such as minimized\n * status.\n */\nexport class ApplicationState\n{\n   /** @type {import('../../SvelteApp.js').SvelteApp} */\n   #application;\n\n   /**\n    * Stores the current save state key being restored by animating. When a restore is already being animated with the\n    * same name the subsequent restore animation is ignored.\n    *\n    * @type {string | undefined}\n    */\n   #currentRestoreKey;\n\n   /** @type {Map<string, import('../../types').SvelteAppNS.API.State.Data>} */\n   #dataSaved = new Map();\n\n   /**\n    * @param {import('../../SvelteApp.js').SvelteApp}   application - The application.\n    */\n   constructor(application)\n   {\n      this.#application = application;\n\n      Object.seal(this);\n   }\n\n   /**\n    * Clears all saved application state.\n    */\n   clear()\n   {\n      this.#dataSaved.clear();\n   }\n\n   /**\n    * Returns current application state along with any extra data passed into method.\n    *\n    * @param {object} [extra] - Extra data to add to application state.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.State.Data} Passed in object with current application state.\n    */\n   current(extra = {})\n   {\n      return Object.assign(extra, {\n         position: this.#application?.position?.get(),\n         beforeMinimized: this.#application?.position?.state.get({ name: '#beforeMinimized' }),\n         options: this.#application?.reactive?.toJSON(),\n         ui: { minimized: this.#application?.reactive?.minimized }\n      });\n   }\n\n   /**\n    * Gets any saved application state by name.\n    *\n    * @param {object}   options - Options.\n    *\n    * @param {string}   options.name - Saved data set name.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.State.Data | undefined} Any saved application state.\n    */\n   get({ name })\n   {\n      if (typeof name !== 'string')\n      {\n         throw new TypeError(`[SvelteApp.state.get] error: 'name' is not a string.`);\n      }\n\n      return this.#dataSaved.get(name);\n   }\n\n   /**\n    * @returns {IterableIterator<string>} The saved application state names / keys.\n    */\n   keys()\n   {\n      return this.#dataSaved.keys();\n   }\n\n   /**\n    * Removes and returns any saved application state by name.\n    *\n    * @param {object}   options - Options.\n    *\n    * @param {string}   options.name - Name to remove and retrieve.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.State.Data | undefined} Any saved application state.\n    */\n   remove({ name })\n   {\n      if (typeof name !== 'string') { throw new TypeError(`[SvelteApp.state.remove] error: 'name' is not a string.`); }\n\n      const data = this.#dataSaved.get(name);\n      this.#dataSaved.delete(name);\n\n      return data;\n   }\n\n   /**\n    * Restores a previously saved application state by `name` returning the data. Several optional parameters are\n    * available to animate / tween to the new state. When `animateTo` is true an animation is scheduled via\n    * {@link #runtime/svelte/store/position!TJSPosition.API.Animation.to} and the duration and easing name or function may be\n    * specified.\n    *\n    * @param {object}            options - Options.\n    *\n    * @param {string}            options.name - Saved data set name.\n    *\n    * @param {boolean}           [options.remove=false] - Remove data set.\n    *\n    * @param {boolean}           [options.animateTo=false] - Animate to restore data.\n    *\n    * @param {number}            [options.duration=0.1] - Duration in seconds.\n    *\n    * @param {import('@typhonjs-fvtt/runtime/svelte/easing').EasingReference} [options.ease='linear'] - Easing function or easing\n    *        function name.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.State.Data | undefined} Any saved application state.\n    */\n   restore({ name, remove = false, animateTo = false, duration = 0.1, ease = 'linear' })\n   {\n      if (typeof name !== 'string')\n      {\n         throw new TypeError(`[SvelteApp.state.restore] error: 'name' is not a string.`);\n      }\n\n      const dataSaved = this.#dataSaved.get(name);\n\n      if (dataSaved)\n      {\n         if (remove) { this.#dataSaved.delete(name); }\n\n         // Multiple invocations for animated restores are skipped when one is already in progress.\n         if (animateTo && name !== this.#currentRestoreKey)\n         {\n            // Track current restore key name.\n            this.#currentRestoreKey = name;\n\n            this.#setImpl(dataSaved, {\n               animateTo,\n               async: true,\n               duration,\n               ease\n            }).then(() =>\n            {\n               // Reset current restore key name for animation if the same as initial animation initiation.\n               if (name === this.#currentRestoreKey) { this.#currentRestoreKey = void 0; }\n            });\n         }\n      }\n\n      return dataSaved;\n   }\n\n   /**\n    * Saves current application state with the opportunity to add extra data to the saved state.\n    *\n    * @param {object}   options - Options.\n    *\n    * @param {string}   options.name - Name to index this saved state.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.State.Data} Current saved application state.\n    */\n   save({ name, ...extra })\n   {\n      if (typeof name !== 'string') { throw new TypeError(`[SvelteApp.state.save] error: 'name' is not a string.`); }\n\n      const data = this.current(extra);\n\n      this.#dataSaved.set(name, data);\n\n      return data;\n   }\n\n   /**\n    * Sets application state from the given `SvelteApp.API.State.Data` instance. Several optional parameters are\n    * available to animate / tween to the new state. When `animateTo` is true an animation is scheduled via\n    * {@link #runtime/svelte/store/position!AnimationAPI.to} and the duration and easing name or function may be\n    * specified.\n    *\n    * Note: If serializing application state any minimized apps will use the before minimized state on initial render\n    * of the app as it is currently not possible to render apps with Foundry VTT core API in the minimized state.\n    *\n    * @param {import('../../types').SvelteAppNS.API.State.Data}   data - Saved data set name.\n    *\n    * @param {object}         [options] - Optional parameters\n    *\n    * @param {boolean}        [options.animateTo=false] - Animate to restore data.\n    *\n    * @param {number}         [options.duration=0.1] - Duration in seconds.\n    *\n    * @param {import('@typhonjs-fvtt/runtime/svelte/easing').EasingReference} [options.ease='linear'] - Easing function or easing\n    *        function name.\n    */\n   set(data, options = {})\n   {\n      this.#setImpl(data, { ...options, async: false });\n   }\n\n   // Internal implementation ----------------------------------------------------------------------------------------\n\n   /**\n    * Sets application state from the given `SvelteApp.API.State.Data` instance. Several optional parameters are\n    * available to animate / tween to the new state. When `animateTo` is true an animation is scheduled via\n    * {@link #runtime/svelte/store/position!AnimationAPI.to} and the duration and easing name or function may be\n    * specified.\n    *\n    * Note: If serializing application state any minimized apps will use the before minimized state on initial render\n    * of the app as it is currently not possible to render apps with Foundry VTT core API in the minimized state.\n    *\n    * @privateRemarks\n    * TODO: THIS METHOD NEEDS TO BE REFACTORED WHEN TRL IS MADE INTO A STANDALONE FRAMEWORK.\n    *\n    * @param {import('../../types').SvelteAppNS.API.State.Data}   data - Saved data set name.\n    *\n    * @param {object}            [opts] - Optional parameters\n    *\n    * @param {boolean}           [opts.async=false] - If animating return a Promise that resolves with any saved data.\n    *\n    * @param {boolean}           [opts.animateTo=false] - Animate to restore data.\n    *\n    * @param {number}            [opts.duration=0.1] - Duration in seconds.\n    *\n    * @param {import('@typhonjs-fvtt/runtime/svelte/easing').EasingReference} [opts.ease='linear'] - Easing function or easing\n    *        function name.\n    *\n    * @returns {undefined | Promise<void>} When asynchronous the animation Promise.\n    */\n   #setImpl(data, { async = false, animateTo = false, duration = 0.1, ease = 'linear' } = {})\n   {\n      if (!isObject(data))\n      {\n         throw new TypeError(`[SvelteApp.state.set] error: 'data' is not an object.`);\n      }\n\n      const application = this.#application;\n\n      if (!isObject(data?.position))\n      {\n         console.warn(`[SvelteApp.state.set] warning: 'data.position' is not an object.`);\n         return;\n      }\n\n      // TODO: TAKE NOTE THAT WE ARE ACCESSING A FOUNDRY APP v1 GETTER HERE TO DETERMINE IF APPLICATION IS RENDERED.\n      // TODO: THIS NEEDS TO BE REFACTORED WHEN CONVERTING TRL TO A GENERIC FRAMEWORK.\n      const rendered = application.rendered;\n\n      // Update data directly with no store or inline style updates.\n      if (animateTo)  // Animate to saved data.\n      {\n         if (!rendered)\n         {\n            console.warn(`[SvelteApp.state.set] warning: application is not rendered and 'animateTo' is true.`);\n            return;\n         }\n\n         // Provide special handling to potentially change transform origin as this parameter is not animated.\n         if (data.position.transformOrigin !== application.position.transformOrigin)\n         {\n            application.position.transformOrigin = data.position.transformOrigin;\n         }\n\n         if (isObject(data?.ui))\n         {\n            const minimized = typeof data.ui?.minimized === 'boolean' ? data.ui.minimized : false;\n\n            if (application?.reactive?.minimized && !minimized)\n            {\n               application.maximize({ animate: false, duration: 0 });\n            }\n         }\n\n         const promise = application.position.animate.to(data.position, {\n            duration,\n            ease,\n            strategy: 'cancelAll'\n         }).finished.then(({ cancelled }) =>\n         {\n            if (cancelled) { return; }\n\n            // Merge in saved options to application.\n            if (isObject(data?.options))\n            {\n               application?.reactive.mergeOptions(data.options);\n            }\n\n            if (isObject(data?.ui))\n            {\n               const minimized = typeof data.ui?.minimized === 'boolean' ? data.ui.minimized : false;\n\n               // Application is currently minimized and stored state is not, so reset minimized state without\n               // animation.\n               if (!application?.reactive?.minimized && minimized)\n               {\n                  application.minimize({ animate: false, duration: 0 });\n               }\n            }\n\n            if (isObject(data?.beforeMinimized))\n            {\n               application.position.state.set({ name: '#beforeMinimized', ...data.beforeMinimized });\n            }\n         });\n\n         // Return a Promise with the application that resolves after animation ends.\n         if (async) { return promise; }\n      }\n      else\n      {\n         if (rendered)\n         {\n            // Merge in saved options to application.\n            if (isObject(data?.options))\n            {\n               application?.reactive.mergeOptions(data.options);\n            }\n\n            if (isObject(data?.ui))\n            {\n               const minimized = typeof data.ui?.minimized === 'boolean' ? data.ui.minimized : false;\n\n               // Application is currently minimized and stored state is not, so reset minimized state without\n               // animation.\n               if (application?.reactive?.minimized && !minimized)\n               {\n                  application.maximize({ animate: false, duration: 0 });\n               }\n               else if (!application?.reactive?.minimized && minimized)\n               {\n                  application.minimize({ animate: false, duration });\n               }\n            }\n\n            if (isObject(data?.beforeMinimized))\n            {\n               application.position.state.set({ name: '#beforeMinimized', ...data.beforeMinimized });\n            }\n\n            // Default options is to set data for an immediate update.\n            application.position.set(data.position);\n         }\n         else\n         {\n            // When not rendered set position to the 'beforeMinimized' data if it exists otherwise set w/ 'position'.\n            // Currently, w/ Foundry core Application API it is impossible to initially render an app in the minimized\n            // state.\n\n            let positionData = data.position;\n\n            if (isObject(data.beforeMinimized))\n            {\n               // Take before minimized data.\n               positionData = data.beforeMinimized;\n\n               // Apply position left / top to before minimized data. This covers the case when an app is minimized,\n               // but then moved. This allows restoration of the before minimized parameters w/ the last position\n               // location.\n               positionData.left = data.position.left;\n               positionData.top = data.position.top;\n            }\n\n            application.position.set(positionData);\n         }\n      }\n   }\n}\n", "/**\n * Provides a mechanism to retrieve and query all mounted Svelte components including the main application shell.\n *\n * @implements {import('../../types').SvelteAppNS.API.Svelte}\n */\nexport class GetSvelteData\n{\n   /** @type {import('svelte').SvelteComponent[] | null[]} */\n   #applicationShellHolder;\n\n   /** @type {import('./types').SvelteData[]} */\n   #svelteData;\n\n   /**\n    * Keep a direct reference to the SvelteData array in an associated {@link SvelteApp}.\n    *\n    * @param {import('svelte').SvelteComponent[] | null[]}  applicationShellHolder - A reference to the mounted app shell.\n    *\n    * @param {import('./types').SvelteData[]}  svelteData - A reference to the SvelteData array of mounted components.\n    */\n   constructor(applicationShellHolder, svelteData)\n   {\n      this.#applicationShellHolder = applicationShellHolder;\n      this.#svelteData = svelteData;\n   }\n\n   /**\n    * Returns any mounted application shell.\n    *\n    * @returns {import('svelte').SvelteComponent} Any mounted application shell.\n    */\n   get appShell() { return this.#applicationShellHolder[0]; }\n\n   /**\n    * Returns any mounted application shell.\n    *\n    * @deprecated Use {@link GetSvelteData.appShell}; since `0.2.0` removal in `0.5.0`.\n    *\n    * @returns {import('svelte').SvelteComponent} Any mounted application shell.\n    */\n   get applicationShell() { return this.#applicationShellHolder[0]; }\n\n   /**\n    * Returns mounted application shell data / config.\n    *\n    * @internal\n    *\n    * @returns {import('./types').SvelteData} Any mounted application shell data.\n    */\n   get appShellData() { return this.#svelteData[0]; }\n}\n", "import { derived, writable }     from '#svelte/store';\n\nimport { subscribeIgnoreFirst }  from '@typhonjs-fvtt/runtime/svelte/store/util';\n\nimport {\n   TJSSessionStorage,\n   TJSWebStorage }               from '@typhonjs-fvtt/runtime/svelte/store/web-storage';\n\nimport { propertyStore }         from '@typhonjs-fvtt/runtime/svelte/store/writable-derived';\n\nimport {\n   deepMerge,\n   safeAccess,\n   safeSet }                     from '@typhonjs-fvtt/runtime/util/object';\n\n/**\n * API docs and description in {@link SvelteAppNS.API.Reactive}.\n */\nexport class SvelteReactive\n{\n   /**\n    * @type {import('../SvelteApp').SvelteApp}\n    */\n   #application;\n\n   /**\n    * @type {boolean}\n    */\n   #initialized = false;\n\n   /** @type {import('@typhonjs-fvtt/runtime/svelte/store/web-storage').WebStorage} */\n   #sessionStorage;\n\n   /**\n    * The Application option store which is injected into mounted Svelte component context under the `external` key.\n    *\n    * @type {import('./types').StoreAppOptions}\n    */\n   #storeAppOptions;\n\n   /**\n    * Stores the update function for `#storeAppOptions`.\n    *\n    * @type {(this: void, updater: import('svelte/store').Updater<object>) => void}\n    */\n   #storeAppOptionsUpdate;\n\n   /**\n    * Stores the UI state data to make it accessible via getters.\n    *\n    * @type {object}\n    */\n   #dataUIState;\n\n   /**\n    * The UI option store which is injected into mounted Svelte component context under the `external` key.\n    *\n    * @type {import('./types').StoreUIOptions}\n    */\n   #storeUIState;\n\n   /**\n    * Stores the update function for `#storeUIState`.\n    *\n    * @type {(this: void, updater: import('svelte/store').Updater<object>) => void}\n    */\n   #storeUIStateUpdate;\n\n   /**\n    * Stores the unsubscribe functions from local store subscriptions.\n    *\n    * @type {import('svelte/store').Unsubscriber[]}\n    */\n   #storeUnsubscribe = [];\n\n   /**\n    * @param {import('../SvelteApp').SvelteApp} application - The host Foundry application.\n    */\n   constructor(application)\n   {\n      this.#application = application;\n      const optionsSessionStorage = application?.options?.sessionStorage;\n\n      if (optionsSessionStorage !== void 0 && !(optionsSessionStorage instanceof TJSWebStorage))\n      {\n         throw new TypeError(`'options.sessionStorage' is not an instance of TJSWebStorage.`);\n      }\n\n      // If no external web storage API instance is available then create a TJSSessionStorage instance.\n      this.#sessionStorage = optionsSessionStorage !== void 0 ? optionsSessionStorage : new TJSSessionStorage();\n   }\n\n   /**\n    * Initializes reactive support. Package private for internal use.\n    *\n    * @returns {import('./types-local').SvelteReactiveStores | undefined} Internal methods to interact with Svelte\n    * stores.\n    *\n    * @package\n    * @internal\n    */\n   initialize()\n   {\n      if (this.#initialized) { return; }\n\n      this.#initialized = true;\n\n      this.#storesInitialize();\n\n      return {\n         appOptionsUpdate: this.#storeAppOptionsUpdate,\n         uiStateUpdate: this.#storeUIStateUpdate,\n         subscribe: this.#storesSubscribe.bind(this),\n         unsubscribe: this.#storesUnsubscribe.bind(this)\n      };\n   }\n\n// Store getters -----------------------------------------------------------------------------------------------------\n\n   /**\n    * @returns {import('@typhonjs-fvtt/runtime/svelte/store/web-storage').WebStorage} Returns WebStorage (session) instance.\n    */\n   get sessionStorage()\n   {\n      return this.#sessionStorage;\n   }\n\n   /**\n    * Returns the store for app options.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.Reactive.AppOptions} App options store.\n    */\n   get storeAppOptions() { return this.#storeAppOptions; }\n\n   /**\n    * Returns the store for UI options.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.Reactive.UIState} UI options store.\n    */\n   get storeUIState() { return this.#storeUIState; }\n\n// Only reactive getters ---------------------------------------------------------------------------------------------\n\n   /**\n    * Returns the current active Window / WindowProxy UI state.\n    *\n    * @returns {Window} Active window UI state.\n    */\n   get activeWindow() { return this.#dataUIState.activeWindow ?? globalThis; }\n\n   /**\n    * Returns the current dragging UI state.\n    *\n    * @returns {boolean} Dragging UI state.\n    */\n   get dragging() { return this.#dataUIState.dragging; }\n\n   /**\n    * Returns the current minimized UI state.\n    *\n    * @returns {boolean} Minimized UI state.\n    */\n   get minimized() { return this.#dataUIState.minimized; }\n\n   /**\n    * Returns the current resizing UI state.\n    *\n    * @returns {boolean} Resizing UI state.\n    */\n   get resizing() { return this.#dataUIState.resizing; }\n\n   /**\n    * Sets the current active Window / WindowProxy UI state.\n    *\n    * Note: This is protected usage and used internally.\n    *\n    * @param {Window} activeWindow - Active Window / WindowProxy UI state.\n    *\n    * @hidden\n    */\n   set activeWindow(activeWindow)\n   {\n      // Note: when setting activeWindow to undefined `globalThis` is set. There isn't a great test for Window /\n      // WindowProxy, so check `toString`.\n      if (activeWindow === void 0 || activeWindow === null ||\n       (Object.prototype.toString.call(activeWindow) === '[object Window]'))\n      {\n         this.#storeUIStateUpdate((options) => deepMerge(options, { activeWindow: activeWindow ?? globalThis }));\n      }\n   }\n\n// Reactive getter / setters -----------------------------------------------------------------------------------------\n\n   /**\n    * Returns the draggable app option.\n    *\n    * @returns {boolean} Draggable app option.\n    */\n   get draggable() { return this.#application?.options?.draggable; }\n\n   /**\n    * Returns the focusAuto app option.\n    *\n    * @returns {boolean} When true auto-management of app focus is enabled.\n    */\n   get focusAuto() { return this.#application?.options?.focusAuto; }\n\n   /**\n    * Returns the focusKeep app option.\n    *\n    * @returns {boolean} When `focusAuto` and `focusKeep` is true; keeps internal focus.\n    */\n   get focusKeep() { return this.#application?.options?.focusKeep; }\n\n   /**\n    * Returns the focusTrap app option.\n    *\n    * @returns {boolean} When true focus trapping / wrapping is enabled keeping focus inside app.\n    */\n   get focusTrap() { return this.#application?.options?.focusTrap; }\n\n   /**\n    * Returns the headerButtonNoClose app option.\n    *\n    * @returns {boolean} Remove the close the button in header app option.\n    */\n   get headerButtonNoClose() { return this.#application?.options?.headerButtonNoClose; }\n\n   /**\n    * Returns the headerButtonNoLabel app option.\n    *\n    * @returns {boolean} Remove the labels from buttons in header app option.\n    */\n   get headerButtonNoLabel() { return this.#application?.options?.headerButtonNoLabel; }\n\n   /**\n    * Returns the headerIcon app option.\n    *\n    * @returns {string|void} URL for header app icon.\n    */\n   get headerIcon() { return this.#application?.options?.headerIcon; }\n\n   /**\n    * Returns the headerNoTitleMinimized app option.\n    *\n    * @returns {boolean} When true removes the header title when minimized.\n    */\n   get headerNoTitleMinimized() { return this.#application?.options?.headerNoTitleMinimized; }\n\n   /**\n    * Returns the minimizable app option.\n    *\n    * @returns {boolean} Minimizable app option.\n    */\n   get minimizable() { return this.#application?.options?.minimizable; }\n\n   /**\n    * Returns the Foundry popOut state; {@link Application.popOut}\n    *\n    * @returns {boolean} Positionable app option.\n    */\n   get popOut() { return this.#application.popOut; }\n\n   /**\n    * Returns the positionable app option; {@link SvelteAppNS.Options.positionable}\n    *\n    * @returns {boolean} Positionable app option.\n    */\n   get positionable() { return this.#application?.options?.positionable; }\n\n   /**\n    * Returns the resizable option.\n    *\n    * @returns {boolean} Resizable app option.\n    */\n   get resizable() { return this.#application?.options?.resizable; }\n\n   /**\n    * Returns the title accessor from the parent Application class; {@link Application.title}\n    *\n    * @privateRemarks\n    * TODO: Application v2; note that super.title localizes `this.options.title`; IMHO it shouldn't.    *\n    *\n    * @returns {string} Title.\n    */\n   get title() { return this.#application.title; }\n\n   /**\n    * Sets `this.options.draggable` which is reactive for application shells.\n    *\n    * @param {boolean}  draggable - Sets the draggable option.\n    */\n   set draggable(draggable)\n   {\n      if (typeof draggable === 'boolean') { this.setOptions('draggable', draggable); }\n   }\n\n   /**\n    * Sets `this.options.focusAuto` which is reactive for application shells.\n    *\n    * @param {boolean}  focusAuto - Sets the focusAuto option.\n    */\n   set focusAuto(focusAuto)\n   {\n      if (typeof focusAuto === 'boolean') { this.setOptions('focusAuto', focusAuto); }\n   }\n\n   /**\n    * Sets `this.options.focusKeep` which is reactive for application shells.\n    *\n    * @param {boolean}  focusKeep - Sets the focusKeep option.\n    */\n   set focusKeep(focusKeep)\n   {\n      if (typeof focusKeep === 'boolean') { this.setOptions('focusKeep', focusKeep); }\n   }\n\n   /**\n    * Sets `this.options.focusTrap` which is reactive for application shells.\n    *\n    * @param {boolean}  focusTrap - Sets the focusTrap option.\n    */\n   set focusTrap(focusTrap)\n   {\n      if (typeof focusTrap === 'boolean') { this.setOptions('focusTrap', focusTrap); }\n   }\n\n   /**\n    * Sets `this.options.headerButtonNoClose` which is reactive for application shells.\n    *\n    * @param {boolean}  headerButtonNoClose - Sets the headerButtonNoClose option.\n    */\n   set headerButtonNoClose(headerButtonNoClose)\n   {\n      if (typeof headerButtonNoClose === 'boolean') { this.setOptions('headerButtonNoClose', headerButtonNoClose); }\n   }\n\n   /**\n    * Sets `this.options.headerButtonNoLabel` which is reactive for application shells.\n    *\n    * @param {boolean}  headerButtonNoLabel - Sets the headerButtonNoLabel option.\n    */\n   set headerButtonNoLabel(headerButtonNoLabel)\n   {\n      if (typeof headerButtonNoLabel === 'boolean') { this.setOptions('headerButtonNoLabel', headerButtonNoLabel); }\n   }\n\n   /**\n    * Sets `this.options.headerIcon` which is reactive for application shells.\n    *\n    * @param {string | undefined}  headerIcon - Sets the headerButtonNoLabel option.\n    */\n   set headerIcon(headerIcon)\n   {\n      if (headerIcon === void 0 || typeof headerIcon === 'string') { this.setOptions('headerIcon', headerIcon); }\n   }\n\n   /**\n    * Sets `this.options.headerNoTitleMinimized` which is reactive for application shells.\n    *\n    * @param {boolean}  headerNoTitleMinimized - Sets the headerNoTitleMinimized option.\n    */\n   set headerNoTitleMinimized(headerNoTitleMinimized)\n   {\n      if (typeof headerNoTitleMinimized === 'boolean')\n      {\n         this.setOptions('headerNoTitleMinimized', headerNoTitleMinimized);\n      }\n   }\n\n   /**\n    * Sets `this.options.minimizable` which is reactive for application shells that are also pop out.\n    *\n    * @param {boolean}  minimizable - Sets the minimizable option.\n    */\n   set minimizable(minimizable)\n   {\n      if (typeof minimizable === 'boolean') { this.setOptions('minimizable', minimizable); }\n   }\n\n   /**\n    * Sets `this.options.popOut` which is reactive for application shells. This will add / remove this application\n    * from `ui.windows`.\n    *\n    * @param {boolean}  popOut - Sets the popOut option.\n    */\n   set popOut(popOut)\n   {\n      if (typeof popOut === 'boolean') { this.setOptions('popOut', popOut); }\n   }\n\n   /**\n    * Sets `this.options.positionable` enabling / disabling {@link SvelteApp.position}.\n    *\n    * @param {boolean}  positionable - Sets the positionable option.\n    */\n   set positionable(positionable)\n   {\n      if (typeof positionable === 'boolean') { this.setOptions('positionable', positionable); }\n   }\n\n   /**\n    * Sets `this.options.resizable` which is reactive for application shells.\n    *\n    * @param {boolean}  resizable - Sets the resizable option.\n    */\n   set resizable(resizable)\n   {\n      if (typeof resizable === 'boolean') { this.setOptions('resizable', resizable); }\n   }\n\n   /**\n    * Sets `this.options.title` which is reactive for application shells.\n    *\n    * Note: Will set empty string if title is undefined or null.\n    *\n    * @param {string | undefined | null}   title - Application title; will be localized, so a translation key is fine.\n    */\n   set title(title)\n   {\n      if (typeof title === 'string')\n      {\n         this.setOptions('title', title);\n      }\n      else if (title === void 0 || title === null)\n      {\n         this.setOptions('title', '');\n      }\n   }\n\n   // Reactive Options API -------------------------------------------------------------------------------------------\n\n   /**\n    * Provides a way to safely get this applications options given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * // TODO DOCUMENT the accessor in more detail.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {*}        [defaultValue] - A default value returned if the accessor is not found.\n    *\n    * @returns {*} Value at the accessor.\n    */\n   getOptions(accessor, defaultValue)\n   {\n      return safeAccess(this.#application.options, accessor, defaultValue);\n   }\n\n   /**\n    * Provides a way to merge `options` into this applications options and update the appOptions store.\n    *\n    * @param {object}   options - The options object to merge with `this.options`.\n    */\n   mergeOptions(options)\n   {\n      this.#storeAppOptionsUpdate((instanceOptions) => deepMerge(instanceOptions, options));\n   }\n\n   /**\n    * Provides a way to safely set this applications options given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * Additionally, if an application shell Svelte component is mounted and exports the `appOptions` property then\n    * the application options is set to `appOptions` potentially updating the application shell / Svelte component.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {any}      value - Value to set.\n    */\n   setOptions(accessor, value)\n   {\n      const success = safeSet(this.#application.options, accessor, value, { createMissing: true });\n\n      // If `this.options` modified then update the app options store.\n      if (success)\n      {\n         this.#storeAppOptionsUpdate(() => this.#application.options);\n      }\n   }\n\n   /**\n    * Serializes the main {@link SvelteAppNS.Options} for common application state.\n    *\n    * @returns {import('../../types').SvelteAppNS.API.Reactive.Data} Common application state.\n    */\n   toJSON()\n   {\n      return {\n         draggable: this.#application?.options?.draggable ?? true,\n         focusAuto: this.#application?.options?.focusAuto ?? true,\n         focusKeep: this.#application?.options?.focusKeep ?? false,\n         focusTrap: this.#application?.options?.focusTrap ?? true,\n         headerButtonNoClose: this.#application?.options?.headerButtonNoClose ?? false,\n         headerButtonNoLabel: this.#application?.options?.headerButtonNoLabel ?? false,\n         headerNoTitleMinimized: this.#application?.options?.headerNoTitleMinimized ?? false,\n         minimizable: this.#application?.options?.minimizable ?? true,\n         positionable: this.#application?.options?.positionable ?? true,\n         resizable: this.#application?.options?.resizable ?? true\n      };\n   }\n\n   /**\n    * Updates the UI Options store with the current header buttons. You may dynamically add / remove header buttons\n    * if using an application shell Svelte component. In either overriding `_getHeaderButtons` or responding to the\n    * Hooks fired return a new button array and the uiOptions store is updated and the application shell will render\n    * the new buttons.\n    *\n    * Optionally you can set in the SvelteApp app options {@link SvelteAppNS.Options.headerButtonNoClose}\n    * to remove the close button and {@link SvelteAppNS.Options.headerButtonNoLabel} to true and labels will be\n    * removed from the header buttons.\n    *\n    * @param {object} [opts] - Optional parameters (for internal use)\n    *\n    * @param {boolean} [opts.headerButtonNoClose] - The value for `headerButtonNoClose`.\n    *\n    * @param {boolean} [opts.headerButtonNoLabel] - The value for `headerButtonNoLabel`.\n    */\n   updateHeaderButtons({ headerButtonNoClose = this.#application.options.headerButtonNoClose,\n    headerButtonNoLabel = this.#application.options.headerButtonNoLabel } = {})\n   {\n      let buttons = this.#application._getHeaderButtons();\n\n      // Remove close button if this.options.headerButtonNoClose is true;\n      if (typeof headerButtonNoClose === 'boolean' && headerButtonNoClose)\n      {\n         buttons = buttons.filter((button) => button.class !== 'close');\n      }\n\n      // Remove labels if this.options.headerButtonNoLabel is true;\n      if (typeof headerButtonNoLabel === 'boolean' && headerButtonNoLabel)\n      {\n         for (const button of buttons) { button.label = void 0; }\n      }\n\n      this.#storeUIStateUpdate((options) =>\n      {\n         options.headerButtons = buttons;\n         return options;\n      });\n   }\n\n   // Internal implementation ----------------------------------------------------------------------------------------\n\n   /**\n    * Initializes the Svelte stores and derived stores for the application options and UI state.\n    *\n    * While writable stores are created the update method is stored in private variables locally and derived Readable\n    * stores are provided for essential options which are commonly used.\n    *\n    * These stores are injected into all Svelte components mounted under the `external` context: `storeAppOptions` and\n    * `storeUIState`.\n    */\n   #storesInitialize()\n   {\n      const writableAppOptions = writable(this.#application.options);\n\n      // Keep the update function locally, but make the store essentially readable.\n      this.#storeAppOptionsUpdate = writableAppOptions.update;\n\n      /**\n       * Create custom store. The main subscribe method for all app options changes is provided along with derived\n       * writable stores for all reactive options.\n       *\n       * @type {import('./types').StoreAppOptions}\n       */\n      const storeAppOptions = {\n         subscribe: writableAppOptions.subscribe,\n\n         draggable: propertyStore(writableAppOptions, 'draggable'),\n         focusAuto: propertyStore(writableAppOptions, 'focusAuto'),\n         focusKeep: propertyStore(writableAppOptions, 'focusKeep'),\n         focusTrap: propertyStore(writableAppOptions, 'focusTrap'),\n         headerButtonNoClose: propertyStore(writableAppOptions, 'headerButtonNoClose'),\n         headerButtonNoLabel: propertyStore(writableAppOptions, 'headerButtonNoLabel'),\n         headerIcon: propertyStore(writableAppOptions, 'headerIcon'),\n         headerNoTitleMinimized: propertyStore(writableAppOptions, 'headerNoTitleMinimized'),\n         minimizable: propertyStore(writableAppOptions, 'minimizable'),\n         popOut: propertyStore(writableAppOptions, 'popOut'),\n         positionable: propertyStore(writableAppOptions, 'positionable'),\n         resizable: propertyStore(writableAppOptions, 'resizable'),\n         title: propertyStore(writableAppOptions, 'title')\n      };\n\n      Object.freeze(storeAppOptions);\n\n      this.#storeAppOptions = storeAppOptions;\n\n      this.#dataUIState = {\n         activeWindow: globalThis,\n         dragging: false,\n         headerButtons: [],\n         minimized: this.#application._minimized,\n         resizing: false\n      };\n\n      // Create a store for UI state data.\n      const writableUIOptions = writable(this.#dataUIState);\n\n      // Keep the update function locally, but make the store essentially readable.\n      this.#storeUIStateUpdate = writableUIOptions.update;\n\n      /**\n       * @type {import('./types').StoreUIOptions}\n       */\n      const storeUIState = {\n         subscribe: writableUIOptions.subscribe,\n\n         // activeWindow: propertyStore(writableUIOptions, 'activeWindow'),\n         activeWindow: derived(writableUIOptions, ($options, set) => set($options.activeWindow)),\n         dragging: propertyStore(writableUIOptions, 'dragging'),\n         headerButtons: derived(writableUIOptions, ($options, set) => set($options.headerButtons)),\n         minimized: derived(writableUIOptions, ($options, set) => set($options.minimized)),\n         resizing: propertyStore(writableUIOptions, 'resizing')\n      };\n\n      Object.freeze(storeUIState);\n\n      // Initialize the store with options set in the Application constructor.\n      this.#storeUIState = storeUIState;\n   }\n\n   /**\n    * Registers local store subscriptions for app options. `popOut` controls registering this app with `ui.windows`.\n    *\n    * @see SvelteApp._injectHTML\n    */\n   #storesSubscribe()\n   {\n      // Register local subscriptions.\n\n      // Handles updating header buttons to add / remove the close button.\n      this.#storeUnsubscribe.push(subscribeIgnoreFirst(this.#storeAppOptions.headerButtonNoClose, (value) =>\n      {\n         this.updateHeaderButtons({ headerButtonNoClose: value });\n      }));\n\n      // Handles updating header buttons to add / remove button labels.\n      this.#storeUnsubscribe.push(subscribeIgnoreFirst(this.#storeAppOptions.headerButtonNoLabel, (value) =>\n      {\n         this.updateHeaderButtons({ headerButtonNoLabel: value });\n      }));\n\n      // Handles adding / removing this application from `ui.windows` when popOut changes.\n      this.#storeUnsubscribe.push(subscribeIgnoreFirst(this.#storeAppOptions.popOut, (value) =>\n      {\n         if (value && this.#application.rendered)\n         {\n            globalThis.ui.windows[this.#application.appId] = this.#application;\n         }\n         else\n         {\n            delete globalThis.ui.windows[this.#application.appId];\n         }\n      }));\n   }\n\n   /**\n    * Unsubscribes from any locally monitored stores.\n    *\n    * @see SvelteApp.close\n    */\n   #storesUnsubscribe()\n   {\n      this.#storeUnsubscribe.forEach((unsubscribe) => unsubscribe());\n      this.#storeUnsubscribe = [];\n   }\n}\n", "/**\n * Defines the application shell contract. If Svelte components export getter / setters for the following properties\n * then that component is considered an application shell.\n *\n * @type {string[]}\n */\nconst applicationShellContract = ['elementRoot'];\n\nObject.freeze(applicationShellContract);\n\nexport { applicationShellContract };\n", "import { applicationShellContract } from './applicationShellContract.js';\n\n/**\n * Provides a method to determine if the passed in object / Svelte component follows the application shell contract.\n * This involves ensuring that the accessors defined in `applicationShellContract`.\n *\n * Note: A caveat is that when using Vite in a developer build components are wrapped in a proxy / ProxyComponent that\n * defines instance accessors versus on the prototype, so the check below ensures that all accessors in the contract are\n * either available on the prototype or directly on the instance.\n *\n * @param {*}  component - Object / component to test.\n *\n * @returns {boolean} Whether the component is a ApplicationShell or TJSApplicationShell.\n */\nexport function isApplicationShell(component)\n{\n   if (component === null || component === void 0) { return false; }\n\n   let compHasContract = true;\n   let protoHasContract = true;\n\n   // Check for accessors on the instance.\n   for (const accessor of applicationShellContract)\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(component, accessor);\n      if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) { compHasContract = false; }\n   }\n\n   // Get the prototype which is the parent SvelteComponent that has any getter / setters.\n   const prototype = Object.getPrototypeOf(component);\n\n   // Verify the application shell contract. If the accessors (getters / setters) are defined for\n   // `applicationShellContract`.\n   for (const accessor of applicationShellContract)\n   {\n      const descriptor = Object.getOwnPropertyDescriptor(prototype, accessor);\n      if (descriptor === void 0 || descriptor.get === void 0 || descriptor.set === void 0) { protoHasContract = false; }\n   }\n\n   return compHasContract || protoHasContract;\n}\n", "import { TJSSvelte }             from '@typhonjs-fvtt/runtime/svelte/util';\nimport { CrossWindow }           from '@typhonjs-fvtt/runtime/util/browser';\nimport { isObject }              from '@typhonjs-fvtt/runtime/util/object';\n\nimport { isApplicationShell }    from './isApplicationShell.js';\n\n/**\n * Instantiates and attaches a Svelte component to the main inserted HTML.\n *\n * @param {object}            [opts] - Optional parameters.\n *\n * @param {object}            [opts.app] - The target application\n *\n * @param {import('@typhonjs-fvtt/runtime/svelte/util').TJSSvelte.Config.Dynamic}  [opts.config] - Svelte component options\n *\n * @param {Function}          [opts.elementRootUpdate] - A callback to assign to the external context.\n *\n * @returns {import('@typhonjs-fvtt/runtime/svelte/application').SvelteData} The config + instantiated Svelte component.\n */\nexport function loadSvelteConfig({ app, config, elementRootUpdate } = {})\n{\n   let target;\n\n   // A specific HTMLElement to append Svelte component.\n   if (CrossWindow.isHTMLElement(config.target))\n   {\n      target = config.target;\n   }\n   else if (typeof config.target === 'string')\n   {\n      // Attempt to find target from query selector string.\n      const activeWindow = app?.reactive?.activeWindow;\n      target = activeWindow?.document?.querySelector(config.target);\n   }\n\n   if (!CrossWindow.isHTMLElement(target))\n   {\n      console.log(\n       `%c[TRL] loadSvelteConfig error - Could not find target, '${config.target}', for config:\\n`,\n        'background: rgb(57,34,34)', config);\n\n      throw new Error();\n   }\n\n   const NewSvelteComponent = config.class;\n\n   const svelteConfig = TJSSvelte.config.parseConfig({ ...config, target }, { contextExternal: true, thisArg: app });\n\n   const externalContext = svelteConfig.context.get('#external');\n\n   // Inject the Foundry application instance and `elementRootUpdate` to the external context.\n   externalContext.application = app;\n   externalContext.elementRootUpdate = elementRootUpdate;\n   externalContext.sessionStorage = app.reactive.sessionStorage;\n\n   let eventbus;\n\n   // Potentially inject any TyphonJS eventbus and track the proxy in the SvelteData instance.\n   if (isObject(app._eventbus) && typeof app._eventbus.createProxy === 'function')\n   {\n      eventbus = app._eventbus.createProxy();\n      externalContext.eventbus = eventbus;\n   }\n\n   // Seal external context so that it can't be extended.\n   Object.seal(externalContext);\n\n   // Create the Svelte component.\n   /**\n    * @type {import('svelte').SvelteComponent}\n    */\n   const component = new NewSvelteComponent(svelteConfig);\n\n   // Set any eventbus to the config.\n   svelteConfig.eventbus = eventbus;\n\n   /**\n    * @type {HTMLElement}\n    */\n   let element;\n\n   // We can directly get the root element from components which follow the application store contract.\n   if (isApplicationShell(component))\n   {\n      element = component.elementRoot;\n   }\n\n   if (!CrossWindow.isHTMLElement(element))\n   {\n      console.log(\n       `%c[TRL] loadSvelteConfig error - No application shell contract found. Did you bind and export a HTMLElement ` +\n        `as 'elementRoot' and include '<svelte:options accessors={true}/>'?\\n` +\n         `\\nOffending config:\\n`, 'background: rgb(57,34,34)', config);\n\n      throw new Error();\n   }\n\n   return { config: svelteConfig, component, element };\n}\n", "/**\n * Provides an index of all visible rendered {@link SvelteApp} instances in a given Svelte runtime. This allows\n * bulk operations to be performed across all apps.\n */\nexport class TJSAppIndex\n{\n   /**\n    * Stores all visible / rendered apps.\n    *\n    * @type {Map<string, import('@typhonjs-fvtt/runtime/svelte/application').SvelteApp>}\n    */\n   static #visibleApps = new Map();\n\n   /**\n    * Adds a SvelteApp to all visible apps tracked.\n    *\n    * @param {import('@typhonjs-fvtt/runtime/svelte/application').SvelteApp} app - A SvelteApp\n    *\n    * @package\n    */\n   static add(app)\n   {\n      this.#visibleApps.set(app.id, app);\n   }\n\n   /**\n    * Removes a SvelteApp from all visible apps tracked.\n    *\n    * @param {import('@typhonjs-fvtt/runtime/svelte/application').SvelteApp} app - A SvelteApp\n    *\n    * @package\n    */\n   static delete(app)\n   {\n      this.#visibleApps.delete(app.id);\n   }\n\n   /**\n    * Gets a particular app by ID.\n    *\n    * @param {string}   key - App ID.\n    *\n    * @returns {import('@typhonjs-fvtt/runtime/svelte/application').SvelteApp} Associated app.\n    */\n   static get(key)\n   {\n      return this.#visibleApps.get(key);\n   }\n\n   /**\n    * Returns whether an associated app by ID is being tracked.\n    *\n    * @param {string}   key - App ID.\n    *\n    * @returns {boolean} The given App ID is visible.\n    */\n   static has(key)\n   {\n      return this.#visibleApps.has(key);\n   }\n\n   /**\n    * @returns {IterableIterator<string>} All visible app IDs.\n    */\n   static keys()\n   {\n      return this.#visibleApps.keys();\n   }\n\n   /**\n    * @returns {IterableIterator<import('@typhonjs-fvtt/runtime/svelte/application').SvelteApp>} All visible apps.\n    */\n   static values()\n   {\n      return this.#visibleApps.values();\n   }\n}\n", "import { TJSAppIndex } from '../internal/index.js';\n\nexport class FoundryHMRSupport\n{\n   static initialize()\n   {\n      if (import.meta.hot)\n      {\n         Hooks.on('hotReload', (data) =>\n         {\n            // Only handle JSON hot reload presumably specified in package manifest for language translation files.\n            if (data?.extension === 'json')\n            {\n               // Postpone until next macrotask to allow Foundry to update localization first.\n               setTimeout(() =>\n               {\n                  for (const app of TJSAppIndex.values())\n                  {\n                     const appShell = app.svelte.appShell;\n\n                     // Retrieve the original `svelte-hmr` instrumented HMR component / not the proxy.\n                     const hmrComponent = appShell?.$$?.hmr_cmp;\n\n                     if (appShell && typeof hmrComponent?.$replace === 'function')\n                     {\n                        const svelteData = app.svelte.appShellData;\n                        if (svelteData)\n                        {\n                           try\n                           {\n                              // Replace with self; this will invoke `on_hmr` callback in associated SvelteApp.\n                              hmrComponent.$replace(hmrComponent.constructor, {\n                                 target: svelteData.config.target,\n                                 anchor: svelteData.config.anchor,\n                                 preserveLocalState: true,\n                                 conservative: true\n                              });\n                           }\n                           catch (error)\n                           {\n                              const name = hmrComponent?.constructor?.name ?? 'Unknown';\n                              console.error(`TyphonJS Runtime Library error; Could not hot reload component: '${name}'`);\n                              console.error(error);\n                           }\n                        }\n                     }\n                  }\n               }, 0);\n            }\n\n            return true;\n         });\n      }\n   }\n}\n", "import { TJSPosition }     from '@typhonjs-fvtt/runtime/svelte/store/position';\nimport { TJSSvelte }       from '@typhonjs-fvtt/runtime/svelte/util';\nimport { A11yHelper }      from '@typhonjs-fvtt/runtime/util/a11y';\nimport { CrossWindow }     from '@typhonjs-fvtt/runtime/util/browser';\n\nimport {\n   deepMerge,\n   hasGetter,\n   isObject }              from '@typhonjs-fvtt/runtime/util/object';\n\nimport {\n   ApplicationState,\n   GetSvelteData,\n   loadSvelteConfig,\n   SvelteReactive,\n   TJSAppIndex }           from './internal/index.js';\n\n/**\n * Provides a Svelte aware extension to the Foundry {@link Application} class to manage the app lifecycle\n * appropriately. You can declaratively load one or more components from `defaultOptions` using a\n * {@link #runtime/svelte/util!TJSSvelte.Config.Dynamic} object in the {@link SvelteAppNS.Options.svelte} property.\n *\n * @implements {TJSPosition.Positionable}\n */\nexport class SvelteApp extends Application\n{\n   /**\n    * Stores the first mounted component which follows the application shell contract.\n    *\n    * @type {import('svelte').SvelteComponent[] | null[]} Application shell.\n    */\n   #applicationShellHolder = [null];\n\n   /**\n    * Stores and manages application state for saving / restoring / serializing.\n    *\n    * @type {import('./types').SvelteAppNS.API.State}\n    */\n   #applicationState;\n\n   /**\n    * Stores the target element which may not necessarily be the main element.\n    *\n    * @type {HTMLElement}\n    */\n   #elementTarget = null;\n\n   /**\n    * Stores the content element which is set for application shells.\n    *\n    * @type {HTMLElement}\n    */\n   #elementContent = null;\n\n   /**\n    * On initial render gating of `setPosition` invoked by `Application._render` occurs, so that percentage values\n    * can correctly be positioned with initial helper constraints (centered).\n    *\n    * @type {boolean}\n    */\n   #gateSetPosition = false;\n\n   /**\n    * Stores initial z-index from `_renderOuter` to set to target element / Svelte component.\n    *\n    * @type {number}\n    */\n   #initialZIndex = 95;\n\n   /**\n    * Stores on mount state which is checked in _render to trigger onSvelteMount callback.\n    *\n    * @type {boolean}\n    */\n   #onMount = false;\n\n   /**\n    * The position store.\n    *\n    * @type {TJSPosition}\n    */\n   #position;\n\n   /**\n    * Contains the Svelte stores and reactive accessors.\n    *\n    * @type {SvelteReactive}\n    */\n   #reactive;\n\n   /**\n    * Stores SvelteData entries with instantiated Svelte components.\n    *\n    * @type {import('./internal/state-svelte/types').SvelteData[] | null[]}\n    */\n   #svelteData = [null];\n\n   /**\n    * Provides a helper class that combines multiple methods for interacting with the mounted components tracked in\n    * #svelteData.\n    *\n    * @type {import('./types').SvelteAppNS.API.Svelte<Options>}\n    */\n   #getSvelteData = new GetSvelteData(this.#applicationShellHolder, this.#svelteData);\n\n   /**\n    * Contains methods to interact with the Svelte stores.\n    *\n    * @type {import('./internal/state-reactive/types-local').SvelteReactiveStores}\n    */\n   #stores;\n\n   /**\n    * @param {Partial<import('./types').SvelteAppNS.Options>} [options] - The options for the application.\n    */\n   constructor(options = {})\n   {\n      super(options);\n\n      if (!isObject(this.options.svelte))\n      {\n         throw new Error(`SvelteApp - constructor - No Svelte configuration object found in 'options'.`);\n      }\n\n      this.#applicationState = new ApplicationState(this);\n\n      // Initialize TJSPosition with the position object set by Application.\n      this.#position = new TJSPosition(this, {\n         ...this.position,\n         ...this.options,\n         initial: this.options.positionInitial,\n         ortho: this.options.positionOrtho,\n         validator: this.options.positionValidator\n      });\n\n      // Remove old position field.\n      delete this.position;\n\n      /**\n       * Define accessors to retrieve TJSPosition by `this.position`.\n       *\n       * @member {TJSPosition} position - Adds accessors to SvelteApp to get / set the position data.\n       *\n       * @memberof SvelteApp#\n       */\n      Object.defineProperty(this, 'position', {\n         get: () => this.#position,\n         set: (position) => { if (isObject(position)) { this.#position.set(position); } }\n      });\n\n      this.#reactive = new SvelteReactive(this);\n\n      this.#stores = this.#reactive.initialize();\n   }\n\n   /**\n    * Specifies the default options that SvelteApp supports.\n    *\n    * @returns {import('./types').SvelteAppNS.Options} options - Application options.\n    * @see https://foundryvtt.com/api/interfaces/client.ApplicationOptions.html\n    */\n   static get defaultOptions()\n   {\n      return /** @type {import('./types').SvelteAppNS.Options} */ deepMerge(super.defaultOptions, {\n         defaultCloseAnimation: true,     // If false the default slide close animation is not run.\n         draggable: true,                 // If true then application shells are draggable.\n         focusAuto: true,                 // When true auto-management of app focus is enabled.\n         focusKeep: false,                // When `focusAuto` and `focusKeep` is true; keeps internal focus.\n         focusSource: void 0,             // Stores any A11yFocusSource data that is applied when app is closed.\n         focusTrap: true,                 // When true focus trapping / wrapping is enabled keeping focus inside app.\n         headerButtonNoClose: false,      // If true then the close header button is removed.\n         headerButtonNoLabel: false,      // If true then header button labels are removed for application shells.\n         headerIcon: void 0,              // Sets a header icon given an image URL.\n         headerNoTitleMinimized: false,   // If true then header title is hidden when application is minimized.\n         minHeight: MIN_WINDOW_HEIGHT,    // Assigned to position. Number specifying minimum window height.\n         minWidth: MIN_WINDOW_WIDTH,      // Assigned to position. Number specifying minimum window width.\n         positionable: true,              // If false then `position.set` does not take effect.\n         positionInitial: TJSPosition.Initial.browserCentered,      // A helper for initial position placement.\n         positionOrtho: true,             // When true TJSPosition is optimized for orthographic use.\n         positionValidator: TJSPosition.Validators.transformWindow, // A function providing the default validator.\n         sessionStorage: void 0,          // An instance of WebStorage (session) to share across SvelteApps.\n         svelte: void 0,                  // A Svelte configuration object.\n         transformOrigin: 'top left'      // By default, 'top / left' respects rotation when minimizing.\n      });\n   }\n\n   /**\n    * Returns the content element if an application shell is mounted.\n    *\n    * @returns {HTMLElement} Content element.\n    */\n   get elementContent() { return this.#elementContent; }\n\n   /**\n    * Returns the target element or main element if no target defined.\n    *\n    * @returns {HTMLElement} Target element.\n    */\n   get elementTarget() { return this.#elementTarget; }\n\n   /**\n    * Returns the reactive accessors & Svelte stores for SvelteApp.\n    *\n    * @returns {import('./types').SvelteAppNS.API.Reactive} The reactive accessors & Svelte stores.\n    */\n   get reactive() { return this.#reactive; }\n\n   /**\n    * Returns the application state manager.\n    *\n    * @returns {import('./types').SvelteAppNS.API.State} The application state manager.\n    */\n   get state() { return this.#applicationState; }\n\n   /**\n    * Returns the `Svelte` helper class w/ various methods to access the mounted application shell component.\n    *\n    * @returns {import('./types').SvelteAppNS.API.Svelte<Options>} `Svelte` / mounted application shell API.\n    */\n   get svelte() { return this.#getSvelteData; }\n\n   /**\n    * In this case of when a template is defined in app options `html` references the inner HTML / template. However,\n    * to activate classic v1 tabs for a Svelte component the element target is passed as an array simulating JQuery as\n    * the element is retrieved immediately and the core listeners use standard DOM queries.\n    *\n    * @protected\n    * @ignore\n    * @internal\n    */\n   _activateCoreListeners(html)\n   {\n      super._activateCoreListeners(typeof this.options.template === 'string' ? html :\n       [this.popOut ? this.#elementTarget?.firstChild : this.#elementTarget]);\n   }\n\n   /**\n    * Provide an override to set this application as the active window regardless of z-index. Changes behaviour from\n    * Foundry core.\n    *\n    * @param {object} [opts] - Optional parameters.\n    *\n    * @param {boolean} [opts.focus=true] - When true and the active element is not contained in the app `elementTarget`\n    *        is focused..\n    *\n    * @param {boolean} [opts.force=false] - Force bring to top; will increment z-index by popOut order.\n    *\n    * @ignore\n    * @internal\n    */\n   bringToTop({ focus = true, force = false } = {})\n   {\n      // Only perform bring to top when the active window is the main Foundry window instance.\n      if (this.reactive.activeWindow !== globalThis) { return; }\n\n      if (force || this.popOut) { super.bringToTop(); }\n\n      const elementTarget = this.elementTarget;\n      const activeElement = document.activeElement;\n\n      // If the activeElement is not contained in this app via elementTarget then blur the current active element\n      // and make elementTarget focused.\n      if (focus && elementTarget && activeElement !== elementTarget && !elementTarget?.contains(activeElement))\n      {\n         // Blur current active element.\n         if (A11yHelper.isFocusTarget(activeElement))\n         {\n            activeElement.blur();\n         }\n\n         elementTarget?.focus();\n      }\n\n      globalThis.ui.activeWindow = this;\n   }\n\n   /**\n    * Note: This method is fully overridden and duplicated as Svelte components need to be destroyed manually and the\n    * best visual result is to destroy them after the default slide up animation occurs, but before the element\n    * is removed from the DOM.\n    *\n    * If you destroy the Svelte components before the slide up animation the Svelte elements are removed immediately\n    * from the DOM. The purpose of overriding ensures the slide up animation is always completed before\n    * the Svelte components are destroyed and then the element is removed from the DOM.\n    *\n    * Close the application and unregisters references to it within UI mappings.\n    * This function returns a Promise which resolves once the window closing animation concludes.\n    *\n    * @param {object}   [options] - Optional parameters.\n    *\n    * @param {boolean}  [options.force] - Force close regardless of render state.\n    *\n    * @returns {Promise<void>}    A Promise which resolves once the application is closed.\n    *\n    * @ignore\n    * @internal\n    */\n   async close(options = {})\n   {\n      const states = Application.RENDER_STATES;\n\n      if (!options.force && ![states.RENDERED, states.ERROR].includes(this._state)) { return; }\n\n      /**\n       * Get the element.\n       *\n       * @type {HTMLElement}\n       */\n      const el = this.#elementTarget;\n      if (!el)\n      {\n         /**\n          * @ignore\n          * @internal\n          */\n         this._state = states.CLOSED;\n\n         return;\n      }\n\n      // Support for PopOut! module; `close` is double invoked; once before the element is rejoined to the main window.\n      // Reject close invocations when the element window is not the main originating window / globalThis.\n      if (CrossWindow.getWindow(el, { throws: false }) !== globalThis) { return; }\n\n      /**\n       * @ignore\n       * @internal\n       */\n      this._state = states.CLOSING;\n\n      // Unsubscribe from any local stores.\n      this.#stores.unsubscribe();\n\n      // Make any window content overflow hidden to avoid any scrollbars appearing in default or Svelte outro\n      // transitions.\n      const content = el.querySelector('.window-content');\n      if (content)\n      {\n         content.style.overflow = 'hidden';\n\n         // Set all children of content to overflow hidden as if there is going to be additional scrolling elements\n         // they are likely one level deep.\n         for (let cntr = content.children.length; --cntr >= 0;)\n         {\n            content.children[cntr].style.overflow = 'hidden';\n         }\n      }\n\n      // Dispatch Hooks for closing the base and subclass applications\n      for (const cls of this.constructor._getInheritanceChain())\n      {\n         /**\n          * A hook event that fires whenever this Application is closed.\n          *\n          * Note: JQuery wrapping as Foundry event arguments uses JQuery.\n          */\n         Hooks.call(`close${cls.name}`, this, $(el));\n      }\n\n      // If options `defaultCloseAnimation` is false then do not execute the standard slide up animation.\n      // This allows Svelte components to provide any out transition. Application shells will automatically set\n      // `defaultCloseAnimation` based on any out transition set or unset.\n      const animate = typeof this.options.defaultCloseAnimation === 'boolean' ? this.options.defaultCloseAnimation :\n       true;\n\n      if (animate)\n      {\n         // Set min height for full slide.\n         el.style.minHeight = '0';\n\n         const { paddingBottom, paddingTop } = globalThis.getComputedStyle(el);\n\n         // Slide-up application.\n         await el.animate([\n            { maxHeight: `${el.clientHeight}px`, paddingTop, paddingBottom },\n            { maxHeight: 0, paddingTop: 0, paddingBottom: 0 }\n         ], { duration: 250, easing: 'ease-in', fill: 'forwards' }).finished;\n      }\n\n      // Stores the Promises returned from running outro transitions and destroying each Svelte component.\n      const svelteDestroyPromises = [];\n\n      // Manually invoke the destroy callbacks for all Svelte components.\n      for (const entry of this.#svelteData)\n      {\n         if (!isObject(entry)) { continue; }\n\n         // Use `outroAndDestroy` to run outro transitions before destroying.\n         svelteDestroyPromises.push(TJSSvelte.util.outroAndDestroy(entry.component));\n\n         // If any proxy eventbus has been added then remove all event registrations from the component.\n         const eventbus = entry.config.eventbus;\n         if (isObject(eventbus) && typeof eventbus.off === 'function')\n         {\n            eventbus.off();\n            entry.config.eventbus = void 0;\n         }\n      }\n\n      // Await all Svelte components to destroy.\n      await Promise.allSettled(svelteDestroyPromises);\n\n      // Remove from all visible apps tracked.\n      TJSAppIndex.delete(this);\n\n      // Reset SvelteData like this to maintain reference to GetSvelteData / `this.svelte`.\n      this.#svelteData[0] = null;\n\n      // Remove element from the DOM. Most SvelteComponents have already removed it.\n      el.remove();\n\n      // Silently restore any width / height state before minimized as applicable.\n      this.position.state.restore({\n         name: '#beforeMinimized',\n         properties: ['width', 'height'],\n         silent: true,\n         remove: true\n      });\n\n      // Clean up data\n      this.#applicationShellHolder[0] = null;\n\n      /**\n       * @ignore\n       * @internal\n       */\n      this._element = null;\n      this.#elementContent = null;\n      this.#elementTarget = null;\n\n      delete globalThis.ui.windows[this.appId];\n\n      /**\n       * @ignore\n       * @internal\n       */\n      this._minimized = false;\n\n      /**\n       * @ignore\n       * @internal\n       */\n      this._scrollPositions = null;\n\n      /**\n       * @ignore\n       * @internal\n       */\n      this._state = states.CLOSED;\n\n      this.#onMount = false;\n\n      // Update the minimized UI store state.\n      this.#stores.uiStateUpdate((storeOptions) => deepMerge(storeOptions, { minimized: this._minimized }));\n\n      // Apply any stored focus options and then remove them from options.\n      A11yHelper.applyFocusSource(this.options.focusSource);\n\n      delete this.options.focusSource;\n   }\n\n   /**\n    * Specify the set of config buttons which should appear in the SvelteApp header. Buttons should be returned as\n    * an Array of objects. The header buttons which are added to the application can be modified by the\n    * `getApplicationHeaderButtons` hook.\n    *\n    * SvelteApp extends the button functionality with full reactivity for state changes during callbacks. Callbacks\n    * receive the button data and can modify it to update the button state.\n    *\n    * @privateRemarks Provide a basic override implementation to extend types with additional SvelteApp functionality.\n    *\n    * @returns {import('./types').SvelteAppNS.HeaderButton[]} All header buttons.\n    * @protected\n    */\n   _getHeaderButtons()\n   {\n      return super._getHeaderButtons();\n   }\n\n   /**\n    * Inject the Svelte components defined in `this.options.svelte`. The Svelte component can attach to the existing\n    * pop-out of Application or provide no template and render into a document fragment which is then attached to the\n    * DOM.\n    *\n    * @protected\n    * @ignore\n    * @internal\n    */\n   _injectHTML()\n   {\n      // Make sure the store is updated with the latest header buttons. Also allows filtering buttons before display.\n      this.reactive.updateHeaderButtons();\n\n      // Create a function to generate a callback for Svelte components to invoke to update the tracked elements for\n      // application shells in the rare cases that the main element root changes. The update is only triggered on\n      // successive changes of `elementRoot`. Returns a boolean to indicate the element roots are updated.\n      const elementRootUpdate = () =>\n      {\n         let cntr = 0;\n\n         return (elementRoot) =>\n         {\n            if (elementRoot !== null && elementRoot !== void 0 && cntr++ > 0)\n            {\n               this.#updateApplicationShell();\n               return true;\n            }\n\n            return false;\n         };\n      };\n\n      // A sanity check; absence should be detected in constructor.\n      if (!isObject(this.options.svelte))\n      {\n         throw new Error(`SvelteApp - _injectHTML - No Svelte configuration object found in 'options'.`);\n      }\n\n      const svelteData = loadSvelteConfig({\n         app: this,\n         config: this.options.svelte,\n         elementRootUpdate\n      });\n\n      // A sanity check as shouldn't hit this case as only one component is being mounted.\n      if (this.svelte.appShell !== null)\n      {\n         throw new Error(\n          `SvelteApp - _injectHTML - An application shell is already mounted; offending config:\\n` +\n           `${JSON.stringify(this.options.svelte)}`);\n      }\n\n      this.#applicationShellHolder[0] = svelteData.component;\n\n      // If Vite / HMR / svelte_hmr is enabled then add a hook to receive callbacks when the ProxyComponent\n      // refreshes. Update the element root accordingly and force an update to TJSPosition.\n      // See this issue for info about `on_hmr`:\n      // https://github.com/sveltejs/svelte-hmr/issues/57\n      if (TJSSvelte.util.isHMRProxy(svelteData.component) && Array.isArray(svelteData.component?.$$?.on_hmr))\n      {\n         svelteData.component.$$.on_hmr.push(() => () => this.#updateApplicationShell());\n      }\n\n      this.#svelteData[0] = svelteData;\n\n      // Wrap `elementRoot` as a JQuery object and set to AppV1 / Application element.\n      this._element = $(this.svelte.appShell.elementRoot);\n\n      // Detect if the application shell exports an `elementContent` accessor.\n      this.#elementContent = hasGetter(this.svelte.appShell, 'elementContent') ?\n       this.svelte.appShell.elementContent : null;\n\n      // Detect if the application shell exports an `elementTarget` accessor if not set `elementTarget` to\n      // `elementRoot`.\n      this.#elementTarget = hasGetter(this.svelte.appShell, 'elementTarget') ? this.svelte.appShell.elementTarget :\n       this.svelte.appShell.elementRoot;\n\n      // The initial zIndex may be set in application options or for popOut applications is stored by `_renderOuter`\n      // in `this.#initialZIndex`.\n      if (typeof this.options.positionable === 'boolean' && this.options.positionable)\n      {\n         this.#elementTarget.style.zIndex = typeof this.options.zIndex === 'number' ? this.options.zIndex :\n          this.#initialZIndex ?? 95;\n      }\n\n      // Subscribe to local store handling.\n      this.#stores.subscribe();\n   }\n\n   /**\n    * Provides a mechanism to update the UI options store for maximized.\n    *\n    * Note: the sanity check is duplicated from {@link Application.maximize} the store is updated _before_\n    * performing the rest of animations. This allows application shells to remove / show any resize handlers\n    * correctly. Extra constraint data is stored in a saved position state in {@link SvelteApp.minimize}\n    * to animate the content area.\n    *\n    * @param {object}   [opts] - Optional parameters.\n    *\n    * @param {boolean}  [opts.animate=true] - When true perform default maximizing animation.\n    *\n    * @param {number}   [opts.duration=0.1] - Controls content area animation duration in seconds.\n    */\n   async maximize({ animate = true, duration = 0.1 } = {})\n   {\n      if (!this.popOut || [false, null].includes(this._minimized)) { return; }\n\n      this._minimized = null;\n\n      const durationMS = duration * 1000; // For WAAPI.\n\n      // Get content\n      const element = this.elementTarget;\n      const header = element.querySelector('.window-header');\n      const content = element.querySelector('.window-content');\n\n      // Get the complete position before minimized. Used to reset min width & height to initial values later.\n      const positionBefore = this.position.state.get({ name: '#beforeMinimized' });\n\n      // First animate / restore width / async.\n      if (animate)\n      {\n         await this.position.state.restore({\n            name: '#beforeMinimized',\n            async: true,\n            animateTo: true,\n            properties: ['width'],\n            duration: 0.1\n         });\n      }\n\n      element.classList.remove('minimized');\n\n      // Reset display none on all children of header.\n      for (let cntr = header.children.length; --cntr >= 0;) { header.children[cntr].style.display = null; }\n\n      content.style.display = null;\n\n      let constraints;\n\n      if (animate)\n      {\n         // Next animate / restore height synchronously and remove key. Retrieve constraints data for slide up animation\n         // below.\n         ({ constraints } = this.position.state.restore({\n            name: '#beforeMinimized',\n            animateTo: true,\n            properties: ['height'],\n            remove: true,\n            duration\n         }));\n      }\n      else\n      {\n         ({ constraints } = this.position.state.remove({ name: '#beforeMinimized' }));\n      }\n\n      // Slide down content with stored constraints.\n      await content.animate([\n         { maxHeight: 0, paddingTop: 0, paddingBottom: 0, offset: 0 },\n         { ...constraints, offset: 1 },\n         { maxHeight: '100%', offset: 1 },\n      ], { duration: durationMS, fill: 'forwards' }).finished; // WAAPI in ms.\n\n      // Restore previous min width & height from saved data, app options, or default Foundry values.\n      this.position.set({\n         minHeight: positionBefore.minHeight ?? this.options?.minHeight ?? MIN_WINDOW_HEIGHT,\n         minWidth: positionBefore.minWidth ?? this.options?.minWidth ?? MIN_WINDOW_WIDTH,\n      });\n\n      // Remove inline styles that override any styles assigned to the app.\n      element.style.minWidth = null;\n      element.style.minHeight = null;\n\n      this._minimized = false;\n\n      // Using a 50ms timeout prevents any instantaneous display of scrollbars with the above maximize animation.\n      setTimeout(() =>\n      {\n         content.style.overflow = null;\n\n         // Reset all children of content removing overflow hidden.\n         for (let cntr = content.children.length; --cntr >= 0;)\n         {\n            content.children[cntr].style.overflow = null;\n         }\n      }, 50);\n\n      this.#stores.uiStateUpdate((options) => deepMerge(options, { minimized: false }));\n   }\n\n   /**\n    * Provides a mechanism to update the UI options store for minimized.\n    *\n    * Note: the sanity check is duplicated from {@link Application.minimize} the store is updated _before_\n    * performing the rest of animations. This allows application shells to remove / show any resize handlers\n    * correctly. Extra constraint data is stored in a saved position state in {@link SvelteApp.minimize}\n    * to animate the content area.\n    *\n    * @param {object}   [opts] - Optional parameters.\n    *\n    * @param {boolean}  [opts.animate=true] - When true perform default minimizing animation.\n    *\n    * @param {number}   [opts.duration=0.1] - Controls content area animation duration in seconds.\n    */\n   async minimize({ animate = true, duration = 0.1 } = {})\n   {\n      if (!this.rendered || !this.popOut || [true, null].includes(this._minimized)) { return; }\n\n      this.#stores.uiStateUpdate((options) => deepMerge(options, { minimized: true }));\n\n      this._minimized = null;\n\n      const durationMS = duration * 1000; // For WAAPI.\n\n      const element = this.elementTarget;\n\n      // Get content\n      const header = element.querySelector('.window-header');\n      const content = element.querySelector('.window-content');\n\n      // Save current max / min height & width.\n      const beforeMinWidth = this.position.minWidth;\n      const beforeMinHeight = this.position.minHeight;\n\n      // Set minimized min width & height for header bar.\n      this.position.set({ minWidth: 100, minHeight: 30 });\n\n      // Also set inline styles to override any styles scoped to the app.\n      element.style.minWidth = '100px';\n      element.style.minHeight = '30px';\n\n      if (content)\n      {\n         content.style.overflow = 'hidden';\n\n         // Set all children of content to overflow hidden as if there is going to be additional scrolling elements\n         // they are likely one level deep.\n         for (let cntr = content.children.length; --cntr >= 0;)\n         {\n            content.children[cntr].style.overflow = 'hidden';\n         }\n      }\n\n      const { paddingBottom, paddingTop } = globalThis.getComputedStyle(content);\n\n      // Extra data that is saved with the current position. Used during `maximize`.\n      const constraints = {\n         maxHeight: `${content.clientHeight}px`,\n         paddingTop,\n         paddingBottom\n      };\n\n      // Slide-up content\n      if (animate)\n      {\n         const animation = content.animate([\n            constraints,\n            { maxHeight: 0, paddingTop: 0, paddingBottom: 0 }\n         ], { duration: durationMS, fill: 'forwards' }); // WAAPI in ms.\n\n         // Set display style to none when animation finishes.\n         animation.finished.then(() => content.style.display = 'none');\n      }\n      else\n      {\n         setTimeout(() => content.style.display = 'none', durationMS);\n      }\n\n      // Save current position state and add the constraint data to use in `maximize`.\n      const saved = this.position.state.save({ name: '#beforeMinimized', constraints });\n\n      // Set the initial before min width & height.\n      saved.minWidth = beforeMinWidth;\n      saved.minHeight = beforeMinHeight;\n\n      const headerOffsetHeight = header.offsetHeight;\n\n      // minHeight needs to be adjusted to header height.\n      this.position.minHeight = headerOffsetHeight;\n\n      if (animate)\n      {\n         // First await animation of height upward.\n         await this.position.animate.to({ height: headerOffsetHeight }, { duration }).finished;\n      }\n\n      // Set all header buttons besides close and the window title to display none.\n      for (let cntr = header.children.length; --cntr >= 0;)\n      {\n         const className = header.children[cntr].className;\n\n         if (className.includes('window-title') || className.includes('close')) { continue; }\n\n         // v10+ of Foundry core styles automatically hides anything besides the window title and close button, so\n         // explicitly set display to block.\n         if (className.includes('keep-minimized'))\n         {\n            header.children[cntr].style.display = 'block';\n            continue;\n         }\n\n         header.children[cntr].style.display = 'none';\n      }\n\n      if (animate)\n      {\n         // Await animation of width to the left / minimum width.\n         await this.position.animate.to({ width: MIN_WINDOW_WIDTH }, { duration: 0.1 }).finished;\n      }\n\n      element.classList.add('minimized');\n\n      this._minimized = true;\n   }\n\n   /**\n    * Provides a callback after all Svelte components are initialized.\n    */\n   onSvelteMount() {} // eslint-disable-line no-unused-vars\n\n   /**\n    * Provides a callback after the main application shell is remounted. This may occur during HMR / hot module\n    * replacement or directly invoked from the `elementRootUpdate` callback passed to the application shell component\n    * context.\n    */\n   onSvelteRemount() {} // eslint-disable-line no-unused-vars\n\n   /**\n    * Override replacing HTML as Svelte components control the rendering process. Only potentially change the outer\n    * application frame / title for pop-out applications.\n    *\n    * @protected\n    * @ignore\n    * @internal\n    */\n   _replaceHTML(element, html)  // eslint-disable-line no-unused-vars\n   {\n      if (!element.length) { return; }\n\n      this.reactive.updateHeaderButtons();\n   }\n\n   /**\n    * Provides an override verifying that a new Application being rendered for the first time doesn't have a\n    * corresponding DOM element already loaded. This is a check that only occurs when `this._state` is\n    * `Application.RENDER_STATES.NONE`. It is useful in particular when SvelteApp has a static ID\n    * explicitly set in `this.options.id` and long intro / outro transitions are assigned. If a new application\n    * sharing this static ID attempts to open / render for the first time while an existing DOM element sharing\n    * this static ID exists then the initial render is cancelled below rather than crashing later in the render\n    * cycle {@link TJSPosition.set}.\n    *\n    * @protected\n    * @ignore\n    * @internal\n    */\n   async _render(force = false, options = {})\n   {\n      // Store any focusSource instance.\n      if (isObject(options?.focusSource)) { this.options.focusSource = options.focusSource; }\n\n      const activeWindow = this.reactive.activeWindow;\n\n      try\n      {\n         if (this._state === Application.RENDER_STATES.NONE &&\n          A11yHelper.isFocusTarget(activeWindow.document.querySelector(`#${this.id}`)))\n         {\n            console.warn(`SvelteApp - _render: A DOM element already exists for CSS ID '${this.id\n             }'. Cancelling initial render for new application with appId '${this.appId}'.`);\n\n            return;\n         }\n      }\n      catch (err)\n      {\n         console.warn(`SvelteApp - _render: Potentially malformed application ID '${this.id\n          }'. Cancelling initial render for new application with appId '${this.appId}'.`);\n\n         return;\n      }\n\n      // On initial render gating of `setPosition` invoked by `Application._render` occurs, so that percentage values\n      // can correctly be positioned with initial helper constraints (centered).\n      this.#gateSetPosition = true;\n\n      await super._render(force, options);\n\n      this.#gateSetPosition = false;\n\n      // Handle the same render exclusion tests that reject a render in Application.\n\n      // Do not render under certain conditions.\n      if ([Application.RENDER_STATES.CLOSING, Application.RENDER_STATES.RENDERING].includes(this._state)) { return; }\n\n      // Applications which are not currently rendered must be forced.\n      if (!force && (this._state <= Application.RENDER_STATES.NONE)) { return; }\n\n      // It is necessary to directly invoke `position.set` as TJSPosition uses accessors and is not a bare object, so\n      // the merging that occurs in `Application._render` does not take effect. Additionally, any of the main\n      // positional properties that are defined as strings such as percentage values need to be set after the element\n      // is mounted.\n      if (!this._minimized)\n      {\n         this.#position.set({\n            left: typeof this.options?.left === 'string' ? this.options.left : void 0,\n            height: typeof this.options?.height === 'string' ? this.options.height : void 0,\n            maxHeight: typeof this.options?.maxHeight === 'string' ? this.options.maxHeight : void 0,\n            maxWidth: typeof this.options?.maxWidth === 'string' ? this.options.maxWidth : void 0,\n            minHeight: typeof this.options?.minHeight === 'string' ? this.options.minHeight : void 0,\n            minWidth: typeof this.options?.minWidth === 'string' ? this.options.minWidth : void 0,\n            rotateX: typeof this.options?.rotateX === 'string' ? this.options.rotateX : void 0,\n            rotateY: typeof this.options?.rotateY === 'string' ? this.options.rotateY : void 0,\n            rotateZ: typeof this.options?.rotateZ === 'string' ? this.options.rotateZ : void 0,\n            rotation: typeof this.options?.rotation === 'string' ? this.options.rotation : void 0,\n            top: typeof this.options?.top === 'string' ? this.options.top : void 0,\n            width: typeof this.options?.width === 'string' ? this.options.width : void 0,\n\n            ...options\n         });\n      }\n\n      if (!this.#onMount)\n      {\n         // Add to visible apps tracked.\n         TJSAppIndex.add(this);\n\n         this.onSvelteMount();\n\n         this.#onMount = true;\n      }\n   }\n\n   /**\n    * Render the inner application content. Provide an empty JQuery element per the core Foundry API.\n    *\n    * @protected\n    * @ignore\n    * @internal\n    */\n   async _renderInner()\n   {\n      const activeWindow = this.reactive.activeWindow;\n\n      const html = activeWindow.document.createDocumentFragment();\n\n      return $(html);\n   }\n\n   /**\n    * Stores the initial z-index set in `_renderOuter` which is used in `_injectHTML` to set the target element\n    * z-index after the Svelte component is mounted.\n    *\n    * @protected\n    * @ignore\n    * @internal\n    */\n   async _renderOuter()\n   {\n      const html = await super._renderOuter();\n      this.#initialZIndex = html[0].style.zIndex;\n      return html;\n   }\n\n   /**\n    * All calculation and updates of position are implemented in {@link TJSPosition.set}.\n    * This allows position to be fully reactive and in control of updating inline styles for the application.\n    *\n    * This method remains for backward compatibility with Foundry. If you have a custom override quite likely you need\n    * to update to using the {@link TJSPosition.validators} / ValidatorAPI functionality.\n    *\n    * @param {TJSPosition.API.Data.TJSPositionDataRelative}   [position] - TJSPosition data.\n    *\n    * @returns {TJSPosition} The updated position object for the application containing the new values.\n    * @ignore\n    */\n   setPosition(position)\n   {\n      return !this.#gateSetPosition ? this.position.set(position) : this.position;\n   }\n\n   /**\n    * This method is invoked by the `elementRootUpdate` callback that is added to the external context passed to\n    * Svelte components. When invoked it updates the local element roots tracked by SvelteApp.\n    *\n    * This method may also be invoked by HMR / hot module replacement via `svelte-hmr`.\n    */\n   #updateApplicationShell()\n   {\n      const applicationShell = this.svelte.appShell;\n\n      if (applicationShell !== null)\n      {\n         this._element = $(applicationShell.elementRoot);\n\n         // Detect if the application shell exports an `elementContent` accessor.\n         this.#elementContent = hasGetter(applicationShell, 'elementContent') ?\n          applicationShell.elementContent : null;\n\n         // Detect if the application shell exports an `elementTarget` accessor.\n         this.#elementTarget = hasGetter(applicationShell, 'elementTarget') ?\n          applicationShell.elementTarget : null;\n\n         if (this.#elementTarget === null)\n         {\n            this.#elementTarget = typeof this.options.selectorTarget === 'string' ?\n             this._element[0].querySelector(this.options.selectorTarget) : this._element[0];\n         }\n\n         // The initial zIndex may be set in application options or for popOut applications is stored by `_renderOuter`\n         // in `this.#initialZIndex`.\n         if (typeof this.options.positionable === 'boolean' && this.options.positionable)\n         {\n            this.#elementTarget.style.zIndex = typeof this.options.zIndex === 'number' ? this.options.zIndex :\n             this.#initialZIndex ?? 95;\n\n            super.bringToTop();\n\n            // Ensure that new root element has inline position styles set.\n            this.position.set(this.position.get());\n         }\n\n         super._activateCoreListeners([this.popOut ? this.#elementTarget?.firstChild : this.#elementTarget]);\n\n         this.onSvelteRemount();\n      }\n   }\n}\n", "import { SvelteApp } from '../SvelteApp.js';\n\n/**\n * Handle `PopOut!` module hooks to allow applications to popout to their own browser window.\n */\nexport class PopoutSupport\n{\n   static initialize()\n   {\n      Hooks.on('PopOut:loading', (app, popout) =>\n      {\n         if (app instanceof SvelteApp)\n         {\n            // Disable app position system.\n            app.position.enabled = false;\n\n            // Save current `headerButtonNoClose` state.\n            app.state.save({\n               name: '#beforePopout',\n               headerButtonNoClose: app.reactive.headerButtonNoClose\n            });\n\n            // Set the apps active window to the popout browser window.\n            app.reactive.activeWindow = popout;\n\n            // Disable the close button.\n            app.reactive.headerButtonNoClose = true;\n         }\n      });\n\n      Hooks.on('PopOut:popin', (app) => this.#handleRejoin(app));\n      Hooks.on('PopOut:close', (app) => this.#handleRejoin(app));\n   }\n\n   /**\n    * Handles rejoining the app to main browser window.\n    *\n    * @param {Application} app - The target app.\n    */\n   static #handleRejoin(app)\n   {\n      if (app instanceof SvelteApp)\n      {\n         // Enable the app position system.\n         app.position.enabled = true;\n\n         // Restore the initial header button no close state.\n         const beforeData = app.state.remove({ name: '#beforePopout' });\n         if (beforeData) { app.reactive.headerButtonNoClose = beforeData?.headerButtonNoClose ?? false; }\n\n         // Reset the apps active window to the main `globalThis` reference.\n         app.reactive.activeWindow = void 0;\n      }\n   }\n}\n", "import {\n   deepMerge,\n   isObject,\n   klona,\n   safeAccess,\n   safeSet }   from '@typhonjs-fvtt/runtime/util/object';\n\n/**\n * Provides storage for all dialog options through individual accessors and `get`, `merge`, `replace` and `set` methods\n * that safely access and update data changed to the mounted DialogShell component reactively.\n */\nexport class TJSDialogData\n{\n   /**\n    * @type {import('../../index.js').SvelteApp}\n    */\n   #application;\n\n   /**\n    * Stores the dialog options data.\n    *\n    * @type {import('./types').TJSDialog.OptionsData}\n    */\n   #internal = {};\n\n   /**\n    * @param {import('../../index.js').SvelteApp} application - The host Foundry application.\n    */\n   constructor(application)\n   {\n      this.#application = application;\n\n      Object.seal(this);\n   }\n\n   /**\n    * @returns {{ [key: string]: import('./types').TJSDialogButtonData }} The dialog button configuration.\n    */\n   get buttons()\n   {\n      return this.#internal.buttons;\n   }\n\n   /**\n    * Set the dialog button configuration.\n    *\n    * @param {string} buttons - New dialog button configuration.\n    */\n   set buttons(buttons)\n   {\n      this.#internal.buttons = buttons;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {import('@typhonjs-fvtt/runtime/svelte/util').TJSSvelte.Config.Minimal | string} The Svelte configuration object or HTML string\n    *          content.\n    */\n   get content()\n   {\n      return this.#internal.content;\n   }\n\n   /**\n    * Set the Svelte configuration object or HTML string content.\n    *\n    * @param {import('@typhonjs-fvtt/runtime/svelte/util').TJSSvelte.Config.Minimal | string} content - New Svelte configuration object or\n    *        HTML string content.\n    */\n   set content(content)\n   {\n      this.#internal.content = content;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {string} The default button ID to focus initially.\n    */\n   get default()\n   {\n      return this.#internal.default;\n   }\n\n   /**\n    * Set the default button ID to focus initially.\n    *\n    * @param {string} newDefault - New default button ID to focus initially.\n    */\n   set default(newDefault)\n   {\n      this.#internal.default = newDefault;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} The dialog draggable state; draggable when true.\n    */\n   get draggable()\n   {\n      return this.#internal.draggable;\n   }\n\n   /**\n    * Set the dialog state; draggable when true.\n    *\n    * @param {boolean} draggable - New dialog draggable state; draggable when true.\n    */\n   set draggable(draggable)\n   {\n      this.#internal.draggable = draggable;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true auto-management of app focus is enabled.\n    */\n   get focusAuto()\n   {\n      return this.#internal.focusAuto;\n   }\n\n   /**\n    * Set the dialog auto-management of app focus.\n    *\n    * @param {boolean} focusAuto - New dialog auto-management of app focus.\n    */\n   set focusAuto(focusAuto)\n   {\n      this.#internal.focusAuto = focusAuto;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true the first focusable element that isn't a button is focused.\n    */\n   get focusFirst()\n   {\n      return this.#internal.focusFirst;\n   }\n\n   /**\n    * Set the dialog first focusable element state.\n    *\n    * @param {boolean} focusFirst - New dialog first focusable element state.\n    */\n   set focusFirst(focusFirst)\n   {\n      this.#internal.focusFirst = focusFirst;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When `focusAuto` and `focusKeep` is true; keeps internal focus.\n    */\n   get focusKeep()\n   {\n      return this.#internal.focusKeep;\n   }\n\n   /**\n    * Set the dialog `focusKeep` state. When `focusAuto` and `focusKeep` is true; keeps internal focus.\n    *\n    * @param {boolean} focusKeep - New dialog `focusKeep` state.\n    */\n   set focusKeep(focusKeep)\n   {\n      this.#internal.focusKeep = focusKeep;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true the dialog is minimizable.\n    */\n   get minimizable()\n   {\n      return this.#internal.minimizable;\n   }\n\n   /**\n    * Set the dialog `minimizable` state. When true the dialog is minimizable.\n    *\n    * @param {boolean} minimizable - New dialog `minimizable` state.\n    */\n   set minimizable(minimizable)\n   {\n      this.#internal.minimizable = minimizable;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true a modal dialog is displayed.\n    */\n   get modal()\n   {\n      return this.#internal.modal;\n   }\n\n   /**\n    * Set the dialog `modal` state. When true a modal dialog is displayed.\n    *\n    * @param {boolean} modal - New dialog `modal` state.\n    */\n   set modal(modal)\n   {\n      this.#internal.modal = modal;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {import('./types').TJSDialog.OptionsModal} Additional options for modal dialog display.\n    */\n   get modalOptions()\n   {\n      return this.#internal.modalOptions;\n   }\n\n   /**\n    * Set additional options for modal dialog display.\n    *\n    * @param {import('./types').TJSDialog.OptionsModal} modalOptions - New additional options for modal dialog display.\n    */\n   set modalOptions(modalOptions)\n   {\n      this.#internal.modalOptions = modalOptions;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true and an error is raised in dialog callback functions post a UI error notification.\n    */\n   get notifyError()\n   {\n      return this.#internal.notifyError;\n   }\n\n   /**\n    * Set the dialog `notifyError` state. When true and an error is raised in dialog callback functions post a UI error\n    * notification.\n    *\n    * @param {boolean} notifyError - New dialog `notifyError` state.\n    */\n   set notifyError(notifyError)\n   {\n      this.#internal.notifyError = notifyError;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {string | ((data?: { application?: import('../../index.js').TJSDialog }) => any)} Callback invoked when\n    *          dialog is closed; no button option selected. When defined as a string any matching function by name\n    *          exported from content Svelte component is invoked.\n    */\n   get onClose()\n   {\n      return this.#internal.onClose;\n   }\n\n   /**\n    * Set callback invoked when dialog is closed; no button option selected. When defined as a string any matching\n    * function by name exported from content Svelte component is invoked..\n    *\n    * @param {string | ((data?: { application?: import('../../index.js').TJSDialog }) => any)} onClose - New dialog\n    *        `onClose` state.\n    */\n   set onClose(onClose)\n   {\n      this.#internal.onClose = onClose;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} Dialog `rejectClose` state. When true and a Promise has been created by {@link TJSDialog.wait}\n    *          and the Promise is not in the process of being resolved or rejected on close of the dialog any `onClose`\n    *          function is invoked and any result that is undefined will cause the Promise to then be rejected..\n    */\n   get rejectClose()\n   {\n      return this.#internal.rejectClose;\n   }\n\n   /**\n    * Set the dialog `rejectClose` state.\n    *\n    * @param {boolean} rejectClose - New dialog `rejectClose` state.\n    */\n   set rejectClose(rejectClose)\n   {\n      this.#internal.rejectClose = rejectClose;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true the dialog is resizable.\n    */\n   get resizable()\n   {\n      return this.#internal.resizable;\n   }\n\n   /**\n    * Set the dialog `resizable` state. When true the dialog is resizable.\n    *\n    * @param {boolean} resizable - New dialog `resizable` state.\n    */\n   set resizable(resizable)\n   {\n      this.#internal.resizable = resizable;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {boolean} When true and resolving any Promises and there are undefined results from any button callbacks\n    *          the button ID is resolved.\n    */\n   get resolveId()\n   {\n      return this.#internal.resolveId;\n   }\n\n   /**\n    * Set the dialog `resolveId` state. When true and resolving any Promises and there are undefined results from any\n    * button callbacks the button ID is resolved.\n    *\n    * @param {boolean} resolveId - New dialog `resolveId` state.\n    */\n   set resolveId(resolveId)\n   {\n      this.#internal.resolveId = resolveId;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {string} The dialog window title.\n    */\n   get title()\n   {\n      return this.#internal.title;\n   }\n\n   /**\n    * Set the dialog window title.\n    *\n    * @param {string} title - New dialog window title.\n    */\n   set title(title)\n   {\n      this.#internal.title = title;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {import('./types').TJSDialog.OptionsTransition} Transition options for the dialog.\n    */\n   get transition()\n   {\n      return this.#internal.transition;\n   }\n\n   /**\n    * Set transition options for the dialog.\n    *\n    * @param {import('./types').TJSDialog.OptionsTransition} transition - New transition options for the dialog.\n    */\n   set transition(transition)\n   {\n      this.#internal.transition = transition;\n      this.#updateComponent();\n   }\n\n   /**\n    * @returns {number | null} A specific z-index for the dialog. Pass null for the dialog to act like other\n    *          applications in regard bringing to top when activated.\n    */\n   get zIndex()\n   {\n      return this.#internal.zIndex;\n   }\n\n   /**\n    * Set specific z-index for the dialog.\n    *\n    * @param {number | null} zIndex - New z-index for the dialog.\n    */\n   set zIndex(zIndex)\n   {\n      this.#internal.zIndex = zIndex;\n      this.#updateComponent();\n   }\n\n   /**\n    * Provides a cloned copy of the dialog data.\n    * Note: The content attribute is not cloned as complex / props may be present.\n    *\n    * @returns {import('./types').TJSDialog.OptionsData} A clone of the dialog data.\n    */\n   clone()\n   {\n      // Make a shallow copy of internally stored data.\n      const shallowCopy = { ...this.#internal };\n\n      // Remove the content parameter as it may contain complex props sent to the hosted dialog component.\n      delete shallowCopy.content;\n\n      // Clone the internal data and then set the content directly.\n      const cData = klona(shallowCopy);\n      cData.content = this.#internal.content;\n\n      return cData;\n   }\n\n   /**\n    * Provides a way to safely get this dialogs data given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {any}      [defaultValue] - A default value returned if the accessor is not found.\n    *\n    * @returns {any} Value at the accessor.\n    */\n   get(accessor, defaultValue)\n   {\n      return safeAccess(this.#internal, accessor, defaultValue);\n   }\n\n   /**\n    * @param {import('./types').TJSDialog.OptionsData} data - Merge provided data object into Dialog data.\n    */\n   merge(data)\n   {\n      deepMerge(this.#internal, data);\n      this.#updateComponent();\n   }\n\n   /**\n    * Sets the dialog data; this is reactive.\n    *\n    * @param {import('./types').TJSDialog.OptionsData}   data - Dialog data.\n    */\n   replace(data)\n   {\n      if (!isObject(data)) { throw new TypeError(`TJSDialogData replace error: 'data' is not an object'.`); }\n\n      this.#internal = {};\n\n      // Merge new data and perform a reactive update.\n      this.merge(data);\n   }\n\n   /**\n    * Provides a way to safely set this dialogs data given an accessor string which describes the\n    * entries to walk. To access deeper entries into the object format the accessor string with `.` between entries\n    * to walk.\n    *\n    * Automatically the dialog data will be updated in the associated DialogShell Svelte component.\n    *\n    * @param {string}   accessor - The path / key to set. You can set multiple levels.\n    *\n    * @param {any}      value - Value to set.\n    *\n    * @returns {boolean} True if successful.\n    */\n   set(accessor, value)\n   {\n      const success = safeSet(this.#internal, accessor, value, { createMissing: true });\n\n      // If `this.#internal` modified then update the app options store.\n      if (success) { this.#updateComponent(); }\n\n      return success;\n   }\n\n   /**\n    * Updates the data in the Svelte dialog component.\n    */\n   #updateComponent()\n   {\n      const component = this.#application.svelte.appShell;\n      if (component?.data) { component.data = this.clone(); }\n   }\n}\n", "import { DialogShell }        from '@typhonjs-fvtt/runtime/svelte/component/internal';\n\nimport { ManagedPromise }     from '@typhonjs-fvtt/runtime/util/async';\n\nimport {\n   deepMerge,\n   isObject }                 from '@typhonjs-fvtt/runtime/util/object';\n\nimport { TJSDialogData }      from './internal/state-dialog/index.js';\nimport { SvelteApp }          from './SvelteApp.js';\n\n/**\n * Provides a reactive dialog implementation configured from a unique dialog options object. The dialog features a\n * bottom button bar for user selection.\n *\n * A glasspane / modal option with various styling and transition capabilities is available when setting `modal: true`.\n *\n * Most importantly the `content` attribute of dialog data can be a Svelte component configuration object to render\n * your custom component as the dialog content. When using a Svelte component as the content you can assign a string\n * to the various `on<XXX>` dialog callbacks and an exported function from your component will be invoked to handle the\n * button callback. All dialog button callbacks and `onClose` callback receive a single argument which is the dialog /\n * application instance.\n *\n * When making a form with form validation or other dialog that you don't want to close immediately on button press you\n * can set `autoClose: false`, however you are 100% in control of resolving any Promise callbacks from button presses\n * and also closing the application. Each button can also be configured with `autoClose: false` in the button data.\n *\n * There is a handy Promise management capability to track a single Promise for the lifetime of a dialog available\n * at {@link TJSDialog.managedPromise}. By default when the user closes the dialog / application any managed Promise is\n * resolved with `null`. The managed Promise is available in any Svelte content component by using\n * `const managedPromise = getContext('#managedPromise')`. When handling any custom resolution particularly when\n * setting `autoClose: false` for a given button you are 100% in control of resolving or rejecting asynchronous data to\n * return from the dialog.\n *\n * To create and wait upon a managed promise for asynchronous return results use the static or member variation of\n * {@link TJSDialog.wait}.\n *\n * Please refer to {@link TJSDialog.OptionsData} for the various options used to construct the dialog.\n *\n * There are a couple of static helper methods to quickly create standard dialogs such as a 'yes' / 'no' confirmation\n * dialog with {@link TJSDialog.confirm} and an 'ok' single button dialog with {@link TJSDialog.prompt}.\n */\nexport class TJSDialog extends SvelteApp\n{\n   /** @type {TJSDialogData} */\n   #data;\n\n   /** @type {ManagedPromise} */\n   #managedPromise;\n\n   /**\n    * @param {import('./internal/state-dialog/types').TJSDialogNS.OptionsData} data - Dialog options.\n    *\n    * @param {import('./types').SvelteAppNS.OptionsCore}   [options] - SvelteApp options.\n    */\n   constructor(data, options = {})\n   {\n      // Note: explicit setting of `popOutModuleDisable` to prevent the PopOut! module from acting on modal dialogs.\n      // @ts-expect-error\n      super({ popOutModuleDisable: typeof data?.modal === 'boolean' ? data.modal : false, ...options });\n\n      this.#managedPromise = new ManagedPromise();\n\n      this.#data = new TJSDialogData(this);\n      this.#data.replace(data);\n   }\n\n   /**\n    * Default options for TJSDialog. Provides a default width and setting `height` to `auto` to always display dialog\n    * content even if it changes. The default `DialogShell` / `svelte` options should not be changed and instead mount\n    * the dialog content component by supplying a Svelte configuration object to dialog data `content` field.\n    *\n    * @returns {import('./types').SvelteAppNS.Options} Default options\n    */\n   static get defaultOptions()\n   {\n      return /** @type {import('./types').SvelteAppNS.Options} */ deepMerge(super.defaultOptions, {\n         classes: ['dialog', 'tjs-dialog'],\n         width: 400,\n         height: 'auto',\n         svelte: {\n            class: DialogShell,\n            intro: true,\n            target: document.body,\n            /**\n             * `this` is the TJSDialog instance when invoked.\n             *\n             * @this {TJSDialog}\n             *\n             * @returns {{data: import('./types').TJSDialog.OptionsData, managedPromise: ManagedPromise}} Props\n             */\n            props: function()\n            {\n               return {\n                  data: this.#data.clone(),\n                  managedPromise: this.#managedPromise\n               };\n            }\n         }\n      });\n   }\n\n   /**\n    * Returns the dialog data.\n    *\n    * @returns {import('./internal/state-dialog/types').TJSDialogNS.Data} Dialog data.\n    */\n   get data() { return this.#data; }\n\n   /**\n    * @returns {import('@typhonjs-fvtt/runtime/util/async').ManagedPromise} Returns the managed promise.\n    */\n   get managedPromise() { return this.#managedPromise; }\n\n   /**\n    * Close the dialog and un-register references to it within UI mappings.\n    * This function returns a Promise which resolves once the window closing animation concludes.\n    *\n    * @param {object}   [options] - Optional parameters.\n    *\n    * @param {boolean}  [options.force] - Force close regardless of render state.\n    *\n    * @returns {Promise<void>} A Promise which resolves once the application is closed with the callback value or\n    *                          `true`.\n    */\n   async close(options)\n   {\n      try\n      {\n         // Note: When handling a managed promise if a button selection has already been made the managed promise is\n         // already processing and the resolution below is skipped.\n         if (this.#managedPromise.isActive && !this.#managedPromise.isProcessing)\n         {\n            const result = TJSDialog.#invokeFn(this.#data.onClose, this, null);\n            const rejectClose = typeof this.#data.rejectClose === 'boolean' ? this.#data.rejectClose : false;\n\n            if (rejectClose && result === null)\n            {\n               this.#managedPromise.reject(new Error('TJSDialog was closed without a choice being made.'));\n            }\n            else\n            {\n               this.#managedPromise.resolve(result);\n            }\n         }\n      }\n      catch (err)\n      {\n         const notifyError = typeof this.#data.notifyError === 'boolean' ? this.#data.notifyError : true;\n         if (notifyError)\n         {\n            // TODO: When app eventbus is available send event for UI notification instead of Foundry API usage.\n            globalThis.ui.notifications.error(err, { console: false });\n         }\n\n         // If there is a managed Promise reject it or re-throw error.\n         if (!this.#managedPromise.reject(err)) { throw err; }\n      }\n      finally\n      {\n         await super.close(options);\n      }\n   }\n\n   /**\n    * Brings to top or renders this dialog returning a Promise that is resolved any button pressed or when the dialog\n    * is closed.\n    *\n    * Creates an anonymous data defined TJSDialog returning a Promise that can be awaited upon for the user to make a\n    * choice.\n    *\n    * Note: `null` is returned if the dialog is closed without a user making a choice.\n    *\n    * @template T\n    *\n    * @param {object}   [options] - Options.\n    *\n    * @param {boolean}  [options.reuse=false] - When true if there is an existing managed Promise this allows multiple\n    *        sources to await on the same result.\n    *\n    * @returns {Promise<T>} A promise for dialog resolution.\n    */\n   async wait(options)\n   {\n      // TODO: Direct usage of Foundry core Application API.\n      if (this.rendered)\n      {\n         this.bringToTop();\n      }\n      else\n      {\n         this.render(true, { focus: true });\n      }\n\n      // Return a managed Promise which is automatically resolved on button press via `DialogContent` component or when\n      // the dialog is closed.\n      return this.#managedPromise.create(options);\n   }\n\n   // ---------------------------------------------------------------------------------------------------------------\n\n   /**\n    * A helper factory method to create simple confirmation dialog windows which consist of simple yes / no prompts.\n    * If you require more flexibility, a custom TJSDialog instance is preferred. The default focused button is 'yes'.\n    * You can change the default focused button by setting `default` to `yes` or `no`.\n    *\n    * @template T\n    *\n    * @param {import('./internal/state-dialog/types').TJSDialogNS.OptionsData & {\n    *    onYes?: string | ((data?: { application?: TJSDialog }) => any),\n    *    onNo?: string | ((data?: { application?: TJSDialog }) => any)\n    * }} [data] - Confirm dialog options.\n    *\n    * @param {string|((data?: { application?: TJSDialog }) => any)} [data.onYes] - Callback function upon `yes`; may be\n    *        an async function. When defined as a string any matching function by name exported from content Svelte\n    *        component is invoked.\n    *\n    * @param {string|((data?: { application?: TJSDialog }) => any)} [data.onNo] - Callback function upon `no`; may be an\n    *        async function. When defined as a string any matching function by name exported from content Svelte\n    *        component is invoked.\n    *\n    * @param {import('./types').SvelteAppNS.OptionsCore}  [options]  SvelteApp options passed to the\n    *        TJSDialog constructor.\n    *\n    * @returns {Promise<T>} A promise which resolves with result of yes / no callbacks or true / false.\n    *\n    * @example\n    * const result = await TJSDialog.confirm({\n    *  title: 'A Yes or No Question',\n    *  content: '<p>Choose wisely.</p>',\n    *  onYes: () => 'YES Result',\n    *  onNo: () => 'NO Result'\n    * });\n    *\n    * // Logs 'YES result', 'NO Result', or null if the user closed the dialog without making a selection.\n    * console.log(result);\n    */\n   static async confirm({ onYes, onNo, ...data } = {}, options = {})\n   {\n      // Allow overwriting of default icon and labels.\n      const mergedButtons = deepMerge({\n         yes: {\n            icon: 'fas fa-check',\n            label: 'Yes'\n         },\n         no: {\n            icon: 'fas fa-times',\n            label: 'No',\n         }\n      }, data.buttons ?? {});\n\n      return this.wait({\n         ...data,\n         buttons: deepMerge(mergedButtons, {\n            yes: {\n               onPress: ({ application }) => this.#invokeFn(onYes, application, true)\n            },\n            no: {\n               onPress: ({ application }) => this.#invokeFn(onNo, application, false)\n            }\n         }),\n         default: data.default ?? 'yes'\n      }, options);\n   }\n\n   /**\n    * A helper method to invoke a callback function directly or lookup an exported function with the same name from any\n    * content Svelte component to invoke. This is used internally to apply default values for `confirm` and `prompt`.\n    *\n    * @param {string|((data?: { application?: TJSDialog }) => any)} callback - Callback function to invoke; may be an\n    *        async function. When defined as a string any matching function by name exported from content Svelte\n    *        component is invoked.\n    *\n    * @param {TJSDialog} application - TJSDialog instance passed to callback.\n    *\n    * @param {*} [defaultResult] - An optional default result to return; undefined if not specified.\n    *\n    * @returns {*} Result.\n    *\n    * @internal\n    */\n   static #invokeFn(callback, application, defaultResult = void 0)\n   {\n      let result = defaultResult;\n\n      switch (typeof callback)\n      {\n         case 'function':\n            // Pass the dialog instance to the callback.\n            result = callback({ application });\n            break;\n\n         case 'string':\n         {\n            const dialogComponent = application?.svelte?.appShell?.dialogComponent;\n\n            // Attempt lookup by function name in dialog instance component.\n            if (dialogComponent !== void 0 && typeof dialogComponent?.[callback] === 'function')\n            {\n               result = dialogComponent?.[callback]({ application });\n            }\n            else\n            {\n               if (dialogComponent === void 0)\n               {\n                  console.warn(`[TRL] TJSDialog warning: 'onPress' defined as a string with no ` +\n                   `associated content Svelte component.`);\n               }\n               else if (typeof dialogComponent?.[callback] !== 'function')\n               {\n                  console.warn(`[TRL] TJSDialog warning: The content Svelte component does not contain ` +\n                   `an associated function '${callback}'. Did you remember to add ` +\n                   `'<svelte:options accessors={true} />' and export the function?`);\n               }\n            }\n            break;\n         }\n      }\n\n      return result;\n   }\n\n   /**\n    * A helper factory method to display a basic \"prompt\" style TJSDialog with a single button.\n    *\n    * @template T\n    *\n    * @param {import('./internal/state-dialog/types').TJSDialogNS.OptionsData & {\n    *    onOk?: string | ((data?: { application?: TJSDialog }) => any),\n    *    label?: string,\n    *    icon?: string\n    * }} [data] - Prompt dialog options that includes any TJSDialog options along with the following optional fields:\n    *\n    * @param {string|((data?: { application?: TJSDialog }) => any)} [data.onOk] - Callback function upon `ok`; may be\n    *        an async function. When defined as a string any matching function by name exported from content Svelte\n    *        component is invoked.\n    *\n    * @param {string}   [data.label] - The OK prompt button text.\n    *\n    * @param {string}   [data.icon=\"fas fa-check\"] - Set another icon besides `fas fa-check` for button.\n    *\n    * @param {import('./types').SvelteAppNS.OptionsCore}  [options]  SvelteApp options passed to the\n    *        TJSDialog constructor.\n    *\n    * @returns {Promise<T>} The returned value from the provided callback function or `true` if the button\n    *          is pressed.\n    *\n    * @example\n    * const result = await TJSDialog.prompt({\n    *  title: 'Are you OK?',\n    *  content: '<p>Are you OK?.</p>',\n    *  label: 'Feeling Fine!',\n    *  onOk: () => 'OK'\n    * });\n    *\n    * // Logs 'OK' or null if the user closed the dialog without making a selection.\n    * console.log(result);\n    */\n   static async prompt({ onOk, label, icon = 'fas fa-check', ...data } = {}, options = {})\n   {\n      return this.wait({\n         ...data,\n         buttons: {\n            ok: {\n               icon,\n               label,\n               onPress: ({ application }) => this.#invokeFn(onOk, application, true)\n            }\n         },\n         default: 'ok'\n      }, options);\n   }\n\n   /**\n    * Creates an anonymous data defined TJSDialog returning a Promise that can be awaited upon for the user to make a\n    * choice.\n    *\n    * Note: By default `null` is returned if the dialog is closed without a user making a choice.\n    *\n    * @template T\n    *\n    * @param {import('./internal/state-dialog/types').TJSDialogNS.OptionsData}  data - Dialog data passed to the\n    *        TJSDialog constructor.\n    *\n    * @param {import('./types').SvelteAppNS.OptionsCore}  [options]  SvelteApp options passed to the\n    *        TJSDialog constructor.\n    *\n    * @returns {Promise<T>} A Promise that resolves to the chosen result.\n    */\n   static async wait(data, options = {})\n   {\n      if (!isObject(data)) { throw new TypeError(`TJSDialog.wait error: 'data' is not an object'.`); }\n\n      // Instantiate and render the dialog.\n      return new this({ ...data }, options).wait();\n   }\n}\n", "import {\n   FoundryHMRSupport,\n   PopoutSupport }   from './external/index.js';\n\nimport { SvelteApp } from './SvelteApp.js';\n\nexport { SvelteApp, SvelteApp as SvelteApplication };\n\nexport * from './TJSDialog.js';\n\n// Handle `hotReload` Foundry hook when running the Vite dev server.\nif (import.meta.hot) { FoundryHMRSupport.initialize(); }\n\n// Handle `PopOut!` module hooks to allow applications to popout to their own browser window.\nPopoutSupport.initialize();\n"],
  "mappings": "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",
  "names": ["writable", "ctx", "autoClose", "ctx", "element"]
}
